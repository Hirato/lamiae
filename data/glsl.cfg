// standard shader definitions

lazyshader = [
    defershader $arg1 $arg2 [
        shader @arg1 @arg2 [@@arg3] [@@arg4]
    ]
]

gdepthinterp = [
    if $gdepthformat [
        if (> $gdepthformat 1) [result [
            uniform vec3 gdepthpackparams;
            varying float lineardepth;
        ]] [result [
            uniform vec3 gdepthpackparams;
            varying vec3 lineardepth;
        ]]
    ]
]

gdepthpackvert = [
    if $gdepthformat [
        if (> $gdepthformat 1) [result [
            lineardepth = dot(gl_ModelViewMatrixTranspose[2], @(? $arg1 $arg1 "gl_Vertex"));
        ]] [result [
            lineardepth = dot(gl_ModelViewMatrixTranspose[2], @(? $arg1 $arg1 "gl_Vertex")) * gdepthpackparams;
        ]]
    ]
]

gdepthpackfrag = [
    if $gdepthformat [
        if (> $gdepthformat 1) [result [
            gl_FragData[3].r = lineardepth;
        ]] [result [
            vec3 packdepth = vec3(lineardepth.x, fract(lineardepth.yz));
            packdepth.xy -= packdepth.yz * (1.0/255.0);
            gl_FragData[3].rgb = packdepth;
        ]]
    ]
]

gdepthunpackparams = [
    result [
        uniform vec3 gdepthscale;
        uniform vec3 gdepthunpackparams;
    ]
]

gdepthunpack = [
    if (|| $gdepthformat $arg6) [
        if (|| (> $gdepthformat 1) $arg6) [result [
            float @[arg1] = texture2DRect(@[arg2], @[arg3]).r;
            @arg4
        ]] [result [
            float @[arg1] = dot(texture2DRect(@[arg2], @[arg3]).rgb, gdepthunpackparams); 
            @arg4
        ]]
    ] [if (=s $arg5 []) [result [
        float @[arg1] = gdepthscale.x / (texture2DRect(@[arg2], @[arg3]).r*gdepthscale.y + gdepthscale.z);
    ]] [result [
        float @[arg1] = texture2DRect(@[arg2], @[arg3]).r;
        @arg5
    ]]]
]

gdepthunpackproj = [
    if (|| $gdepthformat $arg6) [
        if (|| (> $gdepthformat 1) $arg6) [result [
            float @[arg1] = texture2DRectProj(@[arg2], @[arg3]).r;
            @arg4
        ]] [result [
            float @[arg1] = dot(texture2DRectProj(@[arg2], @[arg3]).rgb, gdepthunpackparams); 
            @arg4
        ]]
    ] [if (=s $arg5 []) [result [
        float @[arg1] = gdepthscale.x / (texture2DRectProj(@[arg2], @[arg3]).r*gdepthscale.y + gdepthscale.z);
    ]] [result [
        float @[arg1] = texture2DRectProj(@[arg2], @[arg3]).r;
        @arg5
    ]]]
]

shader 0 "null" [
    void main(void)
    {
        gl_Position = gl_Vertex;
    }
] [
    void main(void)
    {
        gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);
    }
]

///////////////////////////////////////////////////
//
// used for any textured polys that don't have a shader set
//
///////////////////////////////////////////////////

shader 0 "default" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = gl_Color;
    }
] [
    uniform sampler2D tex0;
    void main(void)
    {
        gl_FragColor = gl_Color * texture2D(tex0, gl_TexCoord[0].xy);
    }
]

shader 0 "rect" [ 
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = gl_Color;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        gl_FragColor = gl_Color * texture2DRect(tex0, gl_TexCoord[0].xy);
    }
]

shader 0 "tex3d" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = gl_Color;
    }
] [
    uniform sampler3D tex0;
    void main(void)
    {
        gl_FragColor = gl_Color * texture3D(tex0, gl_TexCoord[0].xyz);
    }
]

shader 0 "cubemap" [ 
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = gl_Color;
    }
] [
    uniform samplerCube tex0;
    void main(void)
    {
        gl_FragColor = gl_Color * textureCube(tex0, gl_TexCoord[0].xyz);
    }
]

shader 0 "rgbonly" [ 
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = gl_Color;
    }
] [
    uniform sampler2D tex0;
    void main(void)
    {
        gl_FragColor.rgb = gl_Color.rgb * texture2D(tex0, gl_TexCoord[0].xy).rgb;
        gl_FragColor.a   = gl_Color.a;
    }
]

//////////////////////////////////////////////////////////////////////
//
// same, but now without texture sampling (some HUD stuff needs this)
//
//////////////////////////////////////////////////////////////////////

shader 0 "notexture" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_FrontColor = gl_Color;
    }
] [
    void main(void)
    {
        gl_FragColor = gl_Color;
    }
]

//////////////////////////////////////////////////////////////////////
//
// fogged variants of default shaders
//
//////////////////////////////////////////////////////////////////////

shader 0 "fogged" [
    #pragma CUBE2_fog
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = gl_Color;
    }
] [
    uniform sampler2D tex0;
    void main(void)
    {
        gl_FragColor = gl_Color * texture2D(tex0, gl_TexCoord[0].xy);
    }
]

shader 0 "foggednotexture" [
    #pragma CUBE2_fog
    void main(void)
    {
        gl_Position = ftransform();
        gl_FrontColor = gl_Color;
    }
] [
    void main(void)
    {
        gl_FragColor = gl_Color;
    }
]

//////////////////////////////////////////////////////////////////////
//
// LDR variants of default shaders
//
//////////////////////////////////////////////////////////////////////

shader 0 "ldr" [
    uniform float ldrscale;
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = vec4(ldrscale * gl_Color.rgb, gl_Color.a);
    }
] [
    uniform sampler2D tex0;
    void main(void)
    {
        gl_FragColor = gl_Color * texture2D(tex0, gl_TexCoord[0].xy);
    }
]

shader 0 "ldrnotexture" [
    uniform float ldrscale;
    void main(void)
    {
        gl_Position = ftransform();
        gl_FrontColor = vec4(ldrscale * gl_Color.rgb, gl_Color.a);
    }
] [
    void main(void)
    {
        gl_FragColor = gl_Color;
    }
]

//////////////////////////////////////////////////////////////////////
//
// for filling the z-buffer only (i.e. multi-pass rendering, OQ)
//
//////////////////////////////////////////////////////////////////////

shader 0 "nocolor" [
    void main() { gl_Position = ftransform(); } 
] [
    void main() {}
]

////////////////////////////////////////////////////////
//
// default lightmapped world shader.. does texcoord gen
//
///////////////////////////////////////////////////////

worldshader = [
  stype = 1
  if (>= (strstr $arg1 "env") 0) [stype = (+ $stype 2)]
  if (>= (strstr $arg1 "pulse") 0) [stype = (+ $stype 0x10)]
  loop i 3 [
    variantshader (? (= $i 2) (+ $stype 4) $stype) $arg1 (- $i 1) [
        @(if (>= $numargs 5) [result $arg5])
        uniform vec4 texgenscroll;
        varying vec3 normal;
        @(gdepthinterp)
        @(if (= $i 1) [result [uniform vec4 blendmapparams;]])
        void main(void)
        {
            gl_Position = ftransform();
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + texgenscroll.xy;
            @(if (= $i 1) [result [
                gl_TexCoord[1].xy = (gl_Vertex.xy - blendmapparams.xy)*blendmapparams.zw;
            ]])
            normal = gl_Normal;
    
            @(gdepthpackvert)

            @arg2
        }
    ] [
        @(if (= $i 2) [result [
            #extension GL_ARB_texture_rectangle : enable
            uniform sampler2DRect refractlight;
            uniform vec4 refractparams;
        ]])
        @(if (>= $numargs 5) [result $arg5])
        @(if (>= $numargs 6) [result $arg6])
        uniform vec4 colorparams;
        uniform sampler2D diffusemap;
        varying vec3 normal;
        @(gdepthinterp)
        @(if (= $i 1) [result [
            uniform float blendlayer;
            uniform sampler2D blendmap;
        ]])
        void main(void)
        {
            vec4 diffuse = texture2D(diffusemap, gl_TexCoord[0].xy);   

            @arg3

            @(if (= $i 2) [result [
                #define alpha 1.0
            ]] [result [
                #define alpha colorparams.a
            ]])
            
            gl_FragData[0].rgb = diffuse.rgb*colorparams.rgb;
            gl_FragData[1].rgb = normal*0.5+0.5;
            gl_FragData[1].a = 0.0;
            @(if (|| (< $numargs 4) [=s $arg4 []]) [result [gl_FragData[2].rgb = vec3(0.0);]] [result $arg4])

            @(if (= $i 2) [result [
                vec3 rlight = texture2DRect(refractlight, gl_FragCoord.xy).rgb;
                gl_FragData[2].rgb += rlight * refractparams.xyz;
            ]])

            @(if (= $i 1) [result [
                float blend = abs(texture2D(blendmap, gl_TexCoord[1].xy).r - blendlayer);
                gl_FragData[0].rgb *= blend;
                gl_FragData[0].a = blendlayer;
                gl_FragData[1] *= blend;
                gl_FragData[2].rgb *= blend;
            ]] [result [
                gl_FragData[0].a = alpha;
            ]])

            @(gdepthpackfrag)
        }
    ]
  ]
]

worldshader "stdworld" [] []

defershader 1 "glowworld" [
  defuniformparam "glowcolor" 1 1 1 // glow color
  worldshader "glowworld" [] [] [
    vec3 glow = texture2D(glowmap, gl_TexCoord[0].xy).rgb;
    glow *= glowcolor.rgb;
    gl_FragData[2].rgb = glow;
  ] [] [uniform sampler2D glowmap;]
]

defershader 0x11 "pulseworld" [
  defuniformparam "pulsespeed" 1 // pulse frequency (Hz)
  worldshader "pulseworld" [
    pulse = abs(fract(millis.x * pulsespeed.x)*2.0 - 1.0); 
  ] [
    vec3 diffuse2 = texture2D(decal, gl_TexCoord[0].xy).rgb; 
    diffuse.rgb = mix(diffuse.rgb, diffuse2, pulse);
  ] [] [uniform vec4 millis; varying float pulse;] [uniform sampler2D decal;]
]

defershader 0x11 "pulseglowworld" [
  defuniformparam "glowcolor" 1 1 1 // glow color
  defuniformparam "pulseglowspeed" 1 // pulse frequency (Hz)
  defuniformparam "pulseglowcolor" 0 0 0 // pulse glow color
  worldshader "pulseglowworld" [
    pulse = mix(glowcolor.rgb, pulseglowcolor.rgb, abs(fract(millis.x * pulseglowspeed.x)*2.0 - 1.0));
  ] [] [
    vec3 glow = texture2D(glowmap, gl_TexCoord[0].xy).rgb;
    gl_FragData[2].rgb = glow*pulse;
  ] [uniform vec4 millis; varying vec3 pulse;] [uniform sampler2D glowmap;]
]

defershader 3 "envworld" [
  defuniformparam "envscale" 0.2 0.2 0.2 // reflectivity 
  worldshader "envworld" [
    camvec = camera.xyz - gl_Vertex.xyz; 
  ] [
    vec3 reflect = textureCube(envmap, 2.0*normal*dot(camvec, normal) - camvec).rgb;
  ] [
    gl_FragData[0].rgb *= 1.0-envscale.x;
    gl_FragData[2].rgb = reflect*(0.5*envscale.x);
  ] [uniform vec4 camera; varying vec3 camvec;] [uniform samplerCube envmap;]

  defuniformparam "envscale" 0.2 0.2 0.2 // reflectivity 
  worldshader "envworldfast" [
    vec3 camvec = camera.xyz - gl_Vertex.xyz;
    rvec = 2.0*gl_Normal*dot(camvec, gl_Normal) - camvec;
  ] [
    vec3 reflect = textureCube(envmap, rvec).rgb;
  ] [
    gl_FragData[0].rgb *= 1.0-envscale.x;
    gl_FragData[2].rgb = reflect*(0.5*envscale.x);
  ] [uniform vec4 camera; varying vec3 rvec;] [uniform samplerCube envmap;]

  defuniformparam "envscale" 0.2 0.2 0.2 // reflectivity 
  worldshader "envworldalt" [] []

  altshader envworld envworldalt
  fastshader envworld envworldfast 2
  fastshader envworld envworldalt 1
]

// bumptype:
//    e -> reserve envmap texture slot
//    o -> orthonormalize
//    t -> tangent space cam
//    r -> envmap reflection
//    R -> modulate envmap reflection with spec map
//    s -> spec
//    S -> spec map
//    p -> parallax
//    P -> steep parallax (7 steps)
//    g -> glow
//    G -> pulse glow
//    b -> blendmap
//    a -> refractive

btopt = [ >= (strstr $bumptype $arg1) 0 ]

bumpvariantshader = [
    bumptype = $arg2
    stype = (? (btopt "e") 3 1)
    srow = -1
    if (btopt "G") [
        stype = (+ $stype 0x10)
        defuniformparam "glowcolor" 1 1 1 // glow color
        defuniformparam "pulseglowspeed" 1     // pulse frequency (Hz)
        defuniformparam "pulseglowcolor" 0 0 0 // pulse glow color
    ] [if (btopt "g") [
        defuniformparam "glowcolor" 1 1 1  // glow color
    ]]
    if (btopt "S") [
        defuniformparam "specscale" 6 6 6 // spec map multiplier
    ] [if (btopt "s") [
        defuniformparam "specscale" 1 1 1 // spec multiplier
    ]]
    if (|| (btopt "p") (btopt "P")) [
        defuniformparam "parallaxscale" 0.06 -0.03 // parallax scaling
    ]
    if (btopt "R") [
        defuniformparam "envscale" 1 1 1 // reflectivity map multiplier
    ] [if (btopt "r") [
        defuniformparam "envscale" 0.2 0.2 0.2 // reflectivity 
    ]]
    if (btopt "b") [
        srow = 0
    ]
    if (btopt "a") [
        stype = (+ $stype 4)
        srow = 1
    ]
    variantshader $stype $arg1 $srow [
        uniform vec4 texgenscroll;
        varying mat3 world;
        @(gdepthinterp)
        @(if (|| (btopt "t") (btopt "r")) [result [uniform vec4 camera;]])
        @(if (btopt "t") [result [varying vec3 camvects;]])
        @(if (btopt "r") [result [varying vec3 camvecw;]])
        @(if (btopt "G") [result [uniform vec4 millis; varying float pulse;]])
        @(if (btopt "b") [result [uniform vec4 blendmapparams;]])
        void main(void)
        {
            gl_Position = ftransform();
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + texgenscroll.xy;

            @(gdepthpackvert)

            @(if (btopt "b") [result [
                gl_TexCoord[1].xy = (gl_Vertex.xy - blendmapparams.xy)*blendmapparams.zw;
            ]])

            vec4 tangent = gl_Color*2.0 - 1.0;
            vec3 binormal = cross(gl_Normal, tangent.xyz) * tangent.w;
            // calculate tangent -> world transform
            world = mat3(tangent.xyz, binormal, gl_Normal);
       
            @(if (btopt "t") [result [camvects = (camera.xyz - gl_Vertex.xyz) * world; ]])
            @(if (btopt "r") [result [camvecw = camera.xyz - gl_Vertex.xyz;]])

            @(if (btopt "G") [result [
                pulse = abs(fract(millis.x*pulseglowspeed.x)*2.0 - 1.0);
            ]])
        }
    ] [
        @(if (btopt "a") [result [
            #extension GL_ARB_texture_rectangle : enable
            uniform sampler2DRect refractmask, refractlight;
            uniform vec4 refractparams;
        ]])
        uniform vec4 colorparams;
        uniform sampler2D diffusemap, normalmap;
        varying mat3 world;
        @(gdepthinterp)
        @(if (btopt "t") [result [varying vec3 camvects;]])
        @(if (btopt "g") [result [uniform sampler2D glowmap;]])
        @(if (btopt "G") [result [varying float pulse;]])
        @(if (btopt "r") [result [uniform samplerCube envmap; varying vec3 camvecw;]])
        @(if (btopt "b") [result [
            uniform float blendlayer;
            uniform sampler2D blendmap;
        ]])
        void main(void)
        {
            @(if (btopt "t") [result [vec3 camdirts = normalize(camvects);]])
            @(if (btopt "p") [result [
                float height = texture2D(normalmap, gl_TexCoord[0].xy).a;
                vec2 dtc = gl_TexCoord[0].xy + camdirts.xy*(height*parallaxscale.x + parallaxscale.y);
            ]])
            @(if (btopt "P") [result [
                const float step = -1.0/7.0;
                vec3 duv = vec3((step*parallaxscale.x/camdirts.z)*camdirts.xy, step);
                vec3 htc = vec3(gl_TexCoord[0].xy + duv.xy*parallaxscale.y, 1.0);
                vec4 height = texture2D(normalmap, htc.xy);
                @@(loopconcat i 7 [concatword [
                    htc += height.w < htc.z ? duv : vec3(0.0);
                    height = texture2D(normalmap, htc.xy);
                ]])
                #define dtc htc.xy
                #define bump height.xyz    
            ]])
            @(if (|| (btopt "p") (btopt "P")) [] [result [#define dtc gl_TexCoord[0].xy]])

            vec4 diffuse = texture2D(diffusemap, dtc);

            @(if (btopt "a") [result [
                #define alpha 1.0
            ]] [result [
                #define alpha colorparams.a
            ]])

            gl_FragData[0].rgb = diffuse.rgb*colorparams.rgb;

            @(if (! (btopt "P")) [result [vec3 bump = texture2D(normalmap, dtc).rgb;]])

            bump = bump*2.0 - 1.0;
            vec3 bumpw = world * bump;
            gl_FragData[1].rgb = bumpw*0.5 + 0.5;

            @(if (btopt "s") [
                if (btopt "S") [result [
                    gl_FragData[1].a = diffuse.a*specscale.x * 0.5;
                ]] [result [
                    gl_FragData[1].a = specscale.x * 0.5;
                ]]
            ] [result [
                gl_FragData[1].a = 0.0;
            ]])

            @(if (btopt "g") [result [
                vec3 glow = texture2D(glowmap, dtc).rgb;
                @(if (btopt "G") [result [
                    vec3 pulsecol = mix(glowcolor.xyz, pulseglowcolor.xyz, pulse);
                ]])
                glow *= @(? (btopt "G") "pulsecol" "glowcolor.xyz"); 
                gl_FragData[2].rgb = glow;
            ]] [result [
                gl_FragData[2].rgb = vec3(0.0);
            ]])
    
            @(if (btopt "r") [result [
                vec3 camvecwn = normalize(camvecw);
                float invfresnel = dot(camvecwn, bumpw);
                vec3 rvec = 2.0*bumpw*invfresnel - camvecwn;
                vec3 reflect = textureCube(envmap, rvec).rgb;
                @(if (btopt "R") [result [
                    float rmod = envscale.x*diffuse.a;
                ]] [result [
                    #define rmod envscale.x
                ]])
                gl_FragData[0].rgb = mix(gl_FragData[0].rgb, reflect, rmod*clamp(1.0 - invfresnel, 0.0, 1.0));
            ]])

            @(if (btopt "a") [result [
                vec2 rtc = bump.xy*refractparams.w;
                float rmask = texture2DRect(refractmask, gl_FragCoord.xy + rtc).a;
                vec3 rlight = texture2DRect(refractlight, gl_FragCoord.xy + rtc*rmask).rgb;
                gl_FragData[2].rgb += rlight * refractparams.xyz;
            ]])

            @(if (btopt "b") [result [
                float blend = abs(texture2D(blendmap, gl_TexCoord[1].xy).r - blendlayer);
                gl_FragData[0].rgb *= blend;
                gl_FragData[0].a = blendlayer;
                gl_FragData[1] *= blend;
                gl_FragData[2].rgb *= blend;
            ]] [result [
                gl_FragData[0].a = alpha;
            ]])

            @(gdepthpackfrag)
        }
    ]
]

bumpshader = [
    defershader (? (>= (strstr $arg2 "e") 0) 3 1) $arg1 [
        bumpvariantshader @arg1 @arg2
        bumpvariantshader @arg1 @(concatword $arg2 "b")
        bumpvariantshader @arg1 @(concatword $arg2 "a")
    ]
]

bumpshader "bumpworld" ""
bumpshader "bumpspecworld" "ots"
fastshader bumpspecworld bumpworld 2
altshader bumpspecworld bumpworld
bumpshader "bumpspecmapworld" "otsS"
fastshader bumpspecmapworld bumpworld 2
altshader bumpspecmapworld bumpworld

bumpshader "bumpglowworld" "g"
bumpshader "bumpspecglowworld" "otsg"
altshader bumpspecglowworld bumpglowworld
bumpshader "bumpspecmapglowworld" "otsSg"
fastshader bumpspecmapglowworld bumpglowworld 2
altshader bumpspecmapglowworld bumpglowworld

bumpshader "bumppulseglowworld" "gG"
bumpshader "bumpspecpulseglowworld" "otsgG"
altshader bumpspecpulseglowworld bumppulseglowworld
bumpshader "bumpspecmappulseglowworld" "otsSgG"
fastshader bumpspecmappulseglowworld bumppulseglowworld 2
altshader bumpspecmappulseglowworld bumppulseglowworld

bumpshader "bumpparallaxworld" "pot"
fastshader bumpparallaxworld bumpworld 1
altshader bumpparallaxworld bumpworld
bumpshader "bumpspecparallaxworld" "pots"
fastshader bumpspecparallaxworld bumpparallaxworld 2
fastshader bumpspecparallaxworld bumpworld 1
altshader bumpspecparallaxworld bumpworld
bumpshader "bumpspecmapparallaxworld" "potsS"
fastshader bumpspecmapparallaxworld bumpparallaxworld 2
fastshader bumpspecmapparallaxworld bumpworld 1
altshader bumpspecmapparallaxworld bumpworld

bumpshader "bumpparallaxglowworld" "potg"
fastshader bumpparallaxglowworld bumpglowworld 1
altshader bumpparallaxglowworld bumpglowworld
bumpshader "bumpspecparallaxglowworld" "potsg"
fastshader bumpspecparallaxglowworld bumpparallaxglowworld 2
fastshader bumpspecparallaxglowworld bumpglowworld 1
altshader bumpspecparallaxglowworld bumpglowworld
bumpshader "bumpspecmapparallaxglowworld" "potsSg"
fastshader bumpspecmapparallaxglowworld bumpparallaxglowworld 2
fastshader bumpspecmapparallaxglowworld bumpglowworld 1
altshader bumpspecmapparallaxglowworld bumpglowworld

bumpshader "bumpparallaxpulseglowworld" "potgG"
fastshader bumpparallaxpulseglowworld bumppulseglowworld 1
altshader bumpparallaxpulseglowworld bumppulseglowworld
bumpshader "bumpspecparallaxpulseglowworld" "potsgG"
fastshader bumpspecparallaxpulseglowworld bumpparallaxpulseglowworld 2
fastshader bumpspecparallaxpulseglowworld bumppulseglowworld 1
altshader bumpspecparallaxpulseglowworld bumppulseglowworld
bumpshader "bumpspecmapparallaxpulseglowworld" "potsSgG"
fastshader bumpspecmapparallaxpulseglowworld bumpparallaxpulseglowworld 2
fastshader bumpspecmapparallaxpulseglowworld bumppulseglowworld 1
altshader bumpspecmapparallaxpulseglowworld bumppulseglowworld

bumpshader "bumpenvworldalt" "e"
bumpshader "bumpenvworld" "eor"
altshader bumpenvworld bumpenvworldalt
fastshader bumpenvworld bumpenvworldalt 2
bumpshader "bumpenvspecworld" "eotsr"
altshader bumpenvspecworld bumpenvworldalt
fastshader bumpenvspecworld bumpenvworldalt 2
bumpshader "bumpenvspecmapworld" "eotsSrR"
altshader bumpenvspecmapworld bumpenvworldalt
fastshader bumpenvspecmapworld bumpenvworldalt 2

bumpshader "bumpenvglowworldalt" "eg"
bumpshader "bumpenvglowworld" "eorg"
altshader bumpenvglowworld bumpenvglowworldalt
fastshader bumpenvglowworld bumpenvglowworldalt 2
bumpshader "bumpenvspecglowworld" "eotsrg"
altshader bumpenvspecglowworld bumpenvglowworldalt
fastshader bumpenvspecglowworld bumpenvglowworldalt 2
bumpshader "bumpenvspecmapglowworld" "eotsSrRg"
altshader bumpenvspecmapglowworld bumpenvglowworldalt
fastshader bumpenvspecmapglowworld bumpenvglowworldalt 2

bumpshader "bumpenvpulseglowworldalt" "egG"
bumpshader "bumpenvpulseglowworld" "eorgG"
altshader bumpenvpulseglowworld bumpenvpulseglowworldalt
fastshader bumpenvpulseglowworld bumpenvpulseglowworldalt 2
bumpshader "bumpenvspecpulseglowworld" "eotsrgG"
altshader bumpenvspecpulseglowworld bumpenvpulseglowworldalt
fastshader bumpenvspecpulseglowworld bumpenvpulseglowworldalt 2
bumpshader "bumpenvspecmappulseglowworld" "eotsSrRgG"
altshader bumpenvspecmappulseglowworld bumpenvpulseglowworldalt
fastshader bumpenvspecmappulseglowworld bumpenvpulseglowworldalt 2

bumpshader "bumpenvparallaxworldalt" "epot"
altshader bumpenvparallaxworldalt bumpenvworldalt
bumpshader "bumpenvparallaxworld" "epotr"
altshader bumpenvparallaxworld bumpenvparallaxworldalt
fastshader bumpenvparallaxworld bumpenvparallaxworldalt 2
fastshader bumpenvparallaxworld bumpenvworldalt 1
bumpshader "bumpenvspecparallaxworld" "epotsr"
altshader bumpenvspecparallaxworld bumpenvparallaxworldalt
fastshader bumpenvspecparallaxworld bumpenvparallaxworldalt 2
fastshader bumpenvspecparallaxworld bumpenvworldalt 1
bumpshader "bumpenvspecmapparallaxworld" "epotsSrR"
altshader bumpenvspecmapparallaxworld bumpenvparallaxworldalt
fastshader bumpenvspecmapparallaxworld bumpenvparallaxworldalt 2
fastshader bumpenvspecmapparallaxworld bumpenvworldalt 1

bumpshader "bumpenvparallaxglowworldalt" "epotg"
altshader bumpenvparallaxglowworldalt bumpenvglowworldalt
bumpshader "bumpenvparallaxglowworld" "epotrg"
altshader bumpenvparallaxglowworld bumpenvparallaxglowworldalt
fastshader bumpenvparallaxglowworld bumpenvparallaxglowworldalt 2
fastshader bumpenvparallaxglowworld bumpenvglowworldalt 1
bumpshader "bumpenvspecparallaxglowworld" "epotsrg"
altshader bumpenvspecparallaxglowworld bumpenvparallaxglowworldalt
fastshader bumpenvspecparallaxglowworld bumpenvparallaxglowworldalt 2
fastshader bumpenvspecparallaxglowworld bumpenvglowworldalt 1
bumpshader "bumpenvspecmapparallaxglowworld" "epotsSrRg"
altshader bumpenvspecmapparallaxglowworld bumpenvparallaxglowworldalt
fastshader bumpenvspecmapparallaxglowworld bumpenvparallaxglowworldalt 2
fastshader bumpenvspecmapparallaxglowworld bumpenvglowworldalt 1

bumpshader "bumpenvparallaxpulseglowworldalt" "epotgG"
altshader bumpenvparallaxpulseglowworldalt bumpenvpulseglowworldalt
bumpshader "bumpenvparallaxpulseglowworld" "epotrgG"
altshader bumpenvparallaxpulseglowworld bumpenvparallaxpulseglowpulseglowworldalt
fastshader bumpenvparallaxpulseglowworld bumpenvparallaxpulseglowpulseglowworldalt 2
fastshader bumpenvparallaxpulseglowworld bumpenvpulseglowworldalt 1
bumpshader "bumpenvspecparallaxpulseglowworld" "epotsrgG"
altshader bumpenvspecparallaxpulseglowworld bumpenvparallaxpulseglowworldalt
fastshader bumpenvspecparallaxpulseglowworld bumpenvparallaxpulseglowworldalt 2
fastshader bumpenvspecparallaxpulseglowworld bumpenvpulseglowworldalt 1
bumpshader "bumpenvspecmapparallaxpulseglowworld" "epotsSrRgG"
altshader bumpenvspecmapparallaxpulseglowworld bumpenvparallaxpulseglowworldalt
fastshader bumpenvspecmapparallaxpulseglowworld bumpenvparallaxpulseglowworldalt 2
fastshader bumpenvspecmapparallaxpulseglowworld bumpenvpulseglowworldalt 1

//bumpshader "steepworld" "Pot"

loop i 2 [
    variantshader 1 "rsmworld" (- $i 1) [
        uniform vec4 texgenscroll;
        uniform vec4 colorparams;
        uniform vec3 rsmdir;
        varying vec4 normal;
        @(if (= $i 1) [result [uniform vec4 blendmapparams;]])
        void main(void)
        {
            gl_Position = ftransform();
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + texgenscroll.xy;
            @(if (= $i 1) [result [
                gl_TexCoord[1].xy = (gl_Vertex.xy - blendmapparams.xy)*blendmapparams.zw;
            ]])
            normal = vec4(gl_Normal, dot(gl_Normal, rsmdir));
        }
    ] [
        uniform vec4 colorparams;
        uniform sampler2D diffusemap;
        varying vec4 normal;
        @(if (= $i 1) [result [
            uniform float blendlayer;
            uniform sampler2D blendmap;
        ]])
        void main(void)
        {
            vec4 diffuse = texture2D(diffusemap, gl_TexCoord[0].xy);   

            @(if (= $i 2) [result [
                #define alpha 1.0
            ]] [result [
                #define alpha colorparams.a
            ]])

            gl_FragData[0].rgb = normal.w*diffuse.rgb*colorparams.rgb;
            gl_FragData[1] = vec4(normal.xyz*0.5+0.5, 0.0);

            @(if (= $i 1) [result [
                float blend = abs(texture2D(blendmap, gl_TexCoord[1].xy).r - blendlayer);
                gl_FragData[0].rgb *= blend;
                gl_FragData[0].a = blendlayer;
                gl_FragData[1] *= blend;
            ]] [result [
                gl_FragData[0].a = alpha;
            ]])
        }
    ]
]

shader 0 "rsmsky" [
    void main(void)
    {
        gl_Position = ftransform();
    }
] [
    void main(void)
    {
        gl_FragData[0] = vec4(0.0, 0.0, 0.0, 1.0);
        gl_FragData[1] = vec4(0.5, 0.5, 0.5, 0.0);
    }
]

////////////////////////////////////////////////
//
// phong lighting model shader
//
////////////////////////////////////////////////

// skeletal animation for matrices and dual quaternions

skelanimdefs = [
    result [
        #pragma CUBE2_attrib vweights 6
        #pragma CUBE2_attrib vbones 7
        attribute vec4 vweights; 
        attribute vec4 vbones;
        #pragma CUBE2_uniform animdata
        uniform vec4 animdata[@@(min $maxvsuniforms $maxskelanimdata)];
    ]
]

skelmatanim = [
    result [
        int index = int(vbones.x);
        @(if (= $arg1 1) [result [
            vec4 mx = animdata[index];
            vec4 my = animdata[index+1];
            vec4 mz = animdata[index+2];
        ]] [result [
            vec4 mx = animdata[index] * vweights.x;
            vec4 my = animdata[index+1] * vweights.x;
            vec4 mz = animdata[index+2] * vweights.x;
            index = int(vbones.y);
            mx += animdata[index] * vweights.y;
            my += animdata[index+1] * vweights.y;
            mz += animdata[index+2] * vweights.y;
        ]])
        @(if (>= $arg1 3) [result [
            index = int(vbones.z);
            mx += animdata[index] * vweights.z;
            my += animdata[index+1] * vweights.z;
            mz += animdata[index+2] * vweights.z;
        ]])
        @(if (>= $arg1 4) [result [
            index = int(vbones.w);
            mx += animdata[index] * vweights.w;
            my += animdata[index+1] * vweights.w;
            mz += animdata[index+2] * vweights.w;
        ]])

        vec4 opos = vec4(dot(mx, gl_Vertex), dot(my, gl_Vertex), dot(mz, gl_Vertex), gl_Vertex.w);

        @(if $arg2 [result [
            vec3 onormal = vec3(dot(mx.xyz, gl_Normal), dot(my.xyz, gl_Normal), dot(mz.xyz, gl_Normal));
        ]])

        @(if $arg3 [result [
            vec3 otangent = vec3(dot(mx.xyz, vtangent.xyz), dot(my.xyz, vtangent.xyz), dot(mz.xyz, vtangent.xyz));
        ]])
    ]
]

skelquatanim = [
    result [
        int index = int(vbones.x);
        @(if (= $arg1 1) [result [
            vec4 dqreal = animdata[index];
            vec4 dqdual = animdata[index+1];
        ]] [result [ 
            vec4 dqreal = animdata[index] * vweights.x;
            vec4 dqdual = animdata[index+1] * vweights.x;
            index = int(vbones.y);
            dqreal += animdata[index] * vweights.y;
            dqdual += animdata[index+1] * vweights.y;
            @(if (>= $arg1 3) [result [
                index = int(vbones.z);
                dqreal += animdata[index] * vweights.z;
                dqdual += animdata[index+1] * vweights.z;
            ]])
            @(if (>= $arg1 4) [result [
                index = int(vbones.w);
                dqreal += animdata[index] * vweights.w;
                dqdual += animdata[index+1] * vweights.w;
            ]])
            float len = length(dqreal);
            dqreal /= len;
            dqdual /= len;
        ]])

        vec4 opos = vec4((cross(dqreal.xyz, cross(dqreal.xyz, gl_Vertex.xyz) + gl_Vertex.xyz*dqreal.w + dqdual.xyz) + dqdual.xyz*dqreal.w - dqreal.xyz*dqdual.w)*2.0 + gl_Vertex.xyz, gl_Vertex.w);

        @(if $arg2 [result [
            vec3 onormal = cross(dqreal.xyz, cross(dqreal.xyz, gl_Normal) + gl_Normal*dqreal.w)*2.0 + gl_Normal;
        ]])

        @(if $arg3 [result [
            vec3 otangent = cross(dqreal.xyz, cross(dqreal.xyz, vtangent.xyz) + vtangent.xyz*dqreal.w)*2.0 + vtangent.xyz;
        ]])
    ]
]

shadowmodelvertexshader = [
    result [
        @(? $arg3 [
            #version 130
            uniform vec4 tetramodelclip;
        ])
        @(if (|| [strlen $arg1] [strlen $arg2]) [result [
            @arg1
            void main(void)
            {
                @arg2
                gl_Position = gl_ModelViewProjectionMatrix * opos;
        ]] [result [
            void main(void)
            {
                gl_Position = ftransform();
                #define opos gl_Vertex
        ]])
                @(? $arg3 [gl_ClipDistance[0] = dot(opos, tetramodelclip);]) 
            }
    ]
]

shader 0 shadowmodel (shadowmodelvertexshader) [
    void main(void)
    {
    }
]

loop i 4 [
    variantshader 0 shadowmodel 0 (shadowmodelvertexshader (skelanimdefs (+ $i 1) 0 0) (skelmatanim (+ $i 1) 0 0)) []
    variantshader 0 shadowmodel 1 (shadowmodelvertexshader (skelanimdefs (+ $i 1) 0 0) (skelquatanim (+ $i 1) 0 0)) []
]

if (>= $glslversion 130) [
    shader 0 tetramodel (shadowmodelvertexshader [] [] 1) [
        #version 130
        void main(void)
        {
        }
    ]

    loop i 4 [
        variantshader 0 tetramodel 0 (shadowmodelvertexshader (skelanimdefs (+ $i 1) 0 0) (skelmatanim (+ $i 1) 0 0) 1) []
        variantshader 0 tetramodel 1 (shadowmodelvertexshader (skelanimdefs (+ $i 1) 0 0) (skelquatanim (+ $i 1) 0 0) 1) []
    ]
]

alphashadowmodelvertexshader = [
    result [
        @(? $arg3 [
            #version 130
            uniform vec4 tetramodelclip;
        ])
        uniform vec4 texscroll;
        @(if (|| [strlen $arg1] [strlen $arg2]) [result [
            @arg1
            void main(void)
            {
                @arg2
                gl_Position = gl_ModelViewProjectionMatrix * opos;
        ]] [result [
            void main(void)
            {
                gl_Position = ftransform();
                #define opos gl_Vertex
        ]])
                gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + texscroll.yz;
                @(? $arg3 [gl_ClipDistance[0] = dot(opos, tetramodelclip);]) 
            }
    ]
]

shader 0 alphashadowmodel (alphashadowmodelvertexshader) [
    uniform sampler2D tex0;
    uniform float alphatest;
    void main(void)
    {
        vec4 color = texture2D(tex0, gl_TexCoord[0].xy);
        if(color.a <= alphatest)    
            discard;
        gl_FragColor = vec4(color.rgb, 1.0);
    }
]

loop i 4 [
    variantshader 0 alphashadowmodel 0 (alphashadowmodelvertexshader (skelanimdefs (+ $i 1) 0 0) (skelmatanim (+ $i 1) 0 0)) []
    variantshader 0 alphashadowmodel 1 (alphashadowmodelvertexshader (skelanimdefs (+ $i 1) 0 0) (skelquatanim (+ $i 1) 0 0)) []
]

if (>= $glslversion 130) [
    shader 0 alphashadowtetramodel (alphashadowmodelvertexshader [] [] 1) [
        #version 130
        uniform sampler2D tex0;
        uniform float alphatest;
        void main(void)
        {
            vec4 color = texture2D(tex0, gl_TexCoord[0].xy);
            if(color.a <= alphatest)    
                discard;
            gl_FragColor = vec4(color.rgb, 1.0);
        }
    ]

    loop i 4 [
        variantshader 0 alphashadowtetramodel 0 (alphashadowmodelvertexshader (skelanimdefs (+ $i 1) 0 0) (skelmatanim (+ $i 1) 0 0) 1) []
        variantshader 0 alphashadowtetramodel 1 (alphashadowmodelvertexshader (skelanimdefs (+ $i 1) 0 0) (skelquatanim (+ $i 1) 0 0) 1) []
    ]
]

// mdltype:
//    a -> alpha test
//    e -> envmap
//    n -> normalmap
//    m -> masks
//    d -> decal
//    B -> matrix skeletal animation
//    b -> dual-quat skeletal animation

mdlopt = [ >= (strstr $modeltype $arg1) 0 ]

modelvertexshader = [
    modeltype = $arg1
    result [
        @(if (|| (mdlopt "b") (mdlopt "B")) [skelanimdefs $arg2 1 (mdlopt "n")])
        @(if (mdlopt "n") [result [
            #pragma CUBE2_attrib vtangent 1
            attribute vec4 vtangent;
        ]])
        uniform vec4 ocamera, texscroll;
        @(if (mdlopt "n") [result [
            varying mat3 world;
            @(if (mdlopt "e") [result [
                varying vec3 camvec;
            ]])
        ]] [result [
            varying vec3 nvec;
            @(if (mdlopt "e") [result [
                uniform vec4 envmapscale;
                varying vec3 rvec;
                varying float rmod;
            ]])
        ]])
        @(gdepthinterp)
        void main(void)
        {
            @(if (mdlopt "B") [skelmatanim $arg2 1 (mdlopt "n")])
            @(if (mdlopt "b") [skelquatanim $arg2 1 (mdlopt "n")])
            @(if (|| (mdlopt "b") (mdlopt "B")) [result [
                gl_Position = gl_ModelViewProjectionMatrix * opos;
            ]] [result [
                gl_Position = ftransform();
                #define opos gl_Vertex
                #define onormal gl_Normal
                #define otangent vtangent.xyz
            ]])

            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + texscroll.yz;
    
            @(gdepthpackvert)
 
            @(if (mdlopt "e") [result [
                vec3 camdir = normalize(ocamera.xyz - opos.xyz);
            ]])

            mat3 objmat = mat3(gl_TextureMatrix[0][0].xyz, gl_TextureMatrix[0][1].xyz, gl_TextureMatrix[0][2].xyz);
            @(if (mdlopt "n") [result [
                @(if (mdlopt "e") [result [
                    camvec = objmat * camdir;
                ]])
                // composition of tangent -> object and object -> world transforms
                //   becomes tangent -> world
                vec3 wnormal = objmat * onormal;
                vec3 wtangent = objmat * otangent;
                vec3 wbitangent = cross(wnormal, wtangent) * vtangent.w;
                world = mat3(wtangent, wbitangent, wnormal);
            ]] [result [
                nvec = objmat * onormal; 
                @(if (mdlopt "e") [result [
                    float invfresnel = dot(camdir, onormal);
                    rvec = objmat * (2.0*invfresnel*onormal - camdir);
                    rmod = envmapscale.x*max(invfresnel, 0.0) + envmapscale.y;    
                ]])
            ]])
        }
    ] 
]

modelfragmentshader = [
    modeltype = $arg1
    result [
        @(if (mdlopt "n") [result [
            varying mat3 world; 
            @(if (mdlopt "e") [result [
                uniform vec4 envmapscale;
                varying vec3 camvec;
            ]])
        ]] [result [
            varying vec3 nvec;
            @(if (mdlopt "e") [result [
                varying vec3 rvec;
                varying float rmod;
            ]])
        ]])
        uniform vec2 fullbright;
        uniform vec4 maskscale;
        @(if (mdlopt "a") [result [uniform float alphatest;]])
        uniform sampler2D tex0;
        @(if (mdlopt "m") [result [uniform sampler2D tex1;]])
        @(if (mdlopt "e") [result [uniform samplerCube tex2;]])
        @(if (mdlopt "n") [result [uniform sampler2D tex3;]])
        @(if (mdlopt "d") [result [uniform sampler2D tex4;]])
        @(gdepthinterp)
        void main(void)
        {
            vec4 diffuse = texture2D(tex0, gl_TexCoord[0].xy);

            @(if (mdlopt "a") [result [
                if(diffuse.a <= alphatest)
                    discard;
                gl_FragData[0] = vec4(diffuse.rgb, 1.0);
            ]] [result [
                gl_FragData[0] = diffuse;
            ]])

            @(if (mdlopt "d") [result [
                vec4 decal = texture2D(tex4, gl_TexCoord[0].xy);
                gl_FragData[0].rgb = mix(gl_FragData[0].rgb, decal.rgb, decal.a);
            ]])

            @(if (mdlopt "m") [result [
                vec3 masks = texture2D(tex1, gl_TexCoord[0].xy).rgb;
            ]])

            @(if (mdlopt "n") [result [
                vec3 normal = texture2D(tex3, gl_TexCoord[0].xy).rgb - 0.5;
                normal = normalize(world * normal);
            ]] [result [
                vec3 normal = normalize(nvec);
            ]])

            gl_FragData[1].rgb = 0.5*normal+0.5;

            float spec = maskscale.x;
            @(if (mdlopt "m") [result [spec *= masks.r;]])   // specmap in red channel
            gl_FragData[1].a = 0.5*spec;

            @(if (mdlopt "m") [result [
                float gmask = max(maskscale.y*masks.g, fullbright.y); // glow mask in green channel
                gl_FragData[2].rgb = diffuse.rgb*gmask;
                gl_FragData[0].rgb *= fullbright.x-gmask;
                @(if (mdlopt "e") [result [
                    @(if (mdlopt "n") [result [
                        vec3 camn = normalize(camvec);
                        float invfresnel = dot(camn, normal);
                        vec3 rvec = 2.0*invfresnel*normal - camn;
                        float rmod = envmapscale.x*clamp(invfresnel, 0.0, 1.0) + envmapscale.y;
                    ]])
                    float rmask = rmod*masks.b; // envmap mask in blue channel
                    vec3 reflect = textureCube(tex2, rvec).rgb;
                    gl_FragData[0].rgb = mix(gl_FragData[0].rgb, reflect, rmask);
                ]])
            ]] [result [
                gl_FragData[2].rgb = diffuse.rgb*fullbright.y;
                gl_FragData[0].rgb *= fullbright.x-fullbright.y;
            ]])

            @(gdepthpackfrag)
        }
    ]
]

modelanimshader = [
    fraganimshader = (? (> $arg2 0) $arg2)
    variantshader 0 $arg1 $arg2 (modelvertexshader (concatword "B" $arg3) $arg4) $fraganimshader
    variantshader 0 $arg1 (+ $arg2 1) (modelvertexshader (concatword "b" $arg3) $arg4) $fraganimshader
]
    
modelshader = [
    defershader 0 $arg1 [
        basemodeltype = [@@arg2]
        shader 0 @arg1 (modelvertexshader $basemodeltype) (modelfragmentshader $basemodeltype)
        loop i 4 [
            modelanimshader @@arg1 0 $basemodeltype (+ $i 1)
        ]
    ]
]

////////////////////////////////////////////////
//
// phong lighting model shader
//
////////////////////////////////////////////////

modelshader "stdmodel" ""
modelshader "masksmodel" "m"
modelshader "envmapmodel" "me"
altshader envmapmodel masksmodel

modelshader "bumpmodel" "n"
modelshader "bumpmasksmodel" "nm"
modelshader "bumpenvmapmodel" "nme"
altshader bumpenvmapmodel bumpmasksmodel

modelshader "alphamodel" "a"
modelshader "masksalphamodel" "am"
modelshader "envmapalphamodel" "ame"
altshader envmapalphamodel masksalphamodel

modelshader "bumpalphamodel" "an"
modelshader "bumpmasksalphamodel" "anm"
modelshader "bumpenvmapalphamodel" "anme"
altshader bumpenvmapalphamodel bumpmasksalphamodel

modelshader "decalmodel" "d"
modelshader "decalmasksmodel" "dm"
modelshader "decalenvmapmodel" "dme"
altshader decalenvmapmodel decalmasksmodel

modelshader "decalbumpmodel" "dn"
modelshader "decalbumpmasksmodel" "dnm"
modelshader "decalbumpenvmapmodel" "dnme"
altshader decalbumpenvmapmodel decalbumpmasksmodel

modelshader "decalalphamodel" "da"
modelshader "decalmasksalphamodel" "dam"
modelshader "decalenvmapalphamodel" "dame"
altshader decalenvmapalphamodel decalmasksalphamodel

modelshader "decalbumpalphamodel" "dan"
modelshader "decalbumpmasksalphamodel" "danm"
modelshader "decalbumpenvmapalphamodel" "danme"
altshader decalbumpenvmapalphamodel decalbumpmasksalphamodel

rsmmodelvertexshader = [
    modeltype = $arg1
    result [
        @(if (|| (mdlopt "b") (mdlopt "B")) [skelanimdefs $arg2 1 0])
        uniform vec4 texscroll;
        uniform vec3 rsmdir;
        varying vec4 normal;
        varying float facing;
        void main(void)
        {
            @(if (mdlopt "B") [skelmatanim $arg2 1 (mdlopt "n")])
            @(if (mdlopt "b") [skelquatanim $arg2 1 (mdlopt "n")])
            @(if (|| (mdlopt "b") (mdlopt "B")) [result [
                gl_Position = gl_ModelViewProjectionMatrix * opos;
            ]] [result [
                gl_Position = ftransform();
                #define opos gl_Vertex
                #define onormal gl_Normal
            ]])
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + texscroll.yz;
            normal.xyz = (gl_TextureMatrix[0] * vec4(onormal, 0.0)).xyz;
            normal.w = dot(normal.xyz, rsmdir);
        }
    ]
]

rsmmodelfragmentshader = [
    modeltype = $arg1
    result [
        varying vec4 normal;
        uniform vec2 fullbright;
        @(if (mdlopt "a") [result [uniform float alphatest;]])
        uniform sampler2D tex0;
        void main(void)
        {
            vec4 diffuse = texture2D(tex0, gl_TexCoord[0].xy);
            @(if (mdlopt "a") [result [
                if(diffuse.a <= alphatest)
                    discard;
            ]])
            gl_FragData[0] = vec4(normal.w*diffuse.rgb, 1.0);
            gl_FragData[1] = vec4(normal.xyz*0.5+0.5, 0.0);
        }
    ]
]

rsmmodelanimshader = [
    fraganimshader = (? (> $arg2 0) $arg2)
    variantshader 0 $arg1 $arg2 (rsmmodelvertexshader (concatword "B" $arg3) $arg4) $fraganimshader
    variantshader 0 $arg1 (+ $arg2 1) (rsmmodelvertexshader (concatword "b" $arg3) $arg4) $fraganimshader
]

rsmmodelshader = [
    shader 0 $arg1 (rsmmodelvertexshader $arg2) (rsmmodelfragmentshader $arg2)
    loop i 4 [
        rsmmodelanimshader $arg1 0 $arg2 (+ $i 1)
    ]
]

rsmmodelshader "rsmmodel" ""
rsmmodelshader "rsmalphamodel "a"

rhtapoffsets12 = [
"0.0565813, 0.61211, 0.763359"
"0.375225, 0.285592, 0.987915"
"0.615192, 0.668996, 0.604938"
"0.963195, 0.355937, 0.175787"
"0.0295724, 0.484268, 0.265694"
"0.917783, 0.88702, 0.201972"
"0.408948, 0.0675985, 0.427564"
"0.19071, 0.923612, 0.0553606"
"0.968078, 0.403943, 0.847224"
"0.384503, 0.922269, 0.990844"
"0.480605, 0.342418, 0.00195318"
"0.956664, 0.923643, 0.915799"
]

rhtapoffsets20 = [
"0.0540788, 0.411725, 0.134068"
"0.0163579, 0.416211, 0.992035"
"0.692068, 0.549272, 0.886502"
"0.305795, 0.781854, 0.571337"
"0.791681, 0.139042, 0.247047"
"0.83929, 0.973663, 0.460982"
"0.0336314, 0.0867641, 0.582324"
"0.148198, 0.961974, 0.0378124"
"0.948729, 0.0713828, 0.916379"
"0.586413, 0.591845, 0.031251"
"0.00189215, 0.973968, 0.932981"
"0.435865, 0.0853603, 0.995148"
"0.36848, 0.820612, 0.942717"
"0.500107, 0.0658284, 0.623005"
"0.580187, 0.4485, 0.379223"
"0.258614, 0.0201422, 0.241005"
"0.987152, 0.441664, 0.43318"
"0.925108, 0.917203, 0.921506"
"0.988372, 0.822047, 0.12479"
"0.330393, 0.43611, 0.762566"
]

rhtapoffsets32 = [
"0.0553911, 0.675924, 0.22129"
"0.562975, 0.508286, 0.549883"
"0.574816, 0.703452, 0.0513016"
"0.981017, 0.930479, 0.243873"
"0.889309, 0.133091, 0.319071"
"0.329112, 0.00759911, 0.472213"
"0.314463, 0.985839, 0.54442"
"0.407697, 0.202643, 0.985748"
"0.998169, 0.760369, 0.792932"
"0.0917692, 0.0666829, 0.0169683"
"0.0157781, 0.632954, 0.740806"
"0.938139, 0.235878, 0.87936"
"0.442305, 0.184942, 0.0901212"
"0.578051, 0.863948, 0.799554"
"0.0698569, 0.259194, 0.667592"
"0.872494, 0.576312, 0.344157"
"0.10123, 0.930082, 0.959929"
"0.178594, 0.991302, 0.046205"
"0.690176, 0.527543, 0.930509"
"0.982025, 0.389447, 0.0344554"
"0.033845, 0.0156865, 0.963866"
"0.655293, 0.154271, 0.640553"
"0.317881, 0.598621, 0.97998"
"0.247261, 0.398206, 0.121586"
"0.822626, 0.985076, 0.655232"
"0.00201422, 0.434278, 0.388348"
"0.511399, 0.977416, 0.278695"
"0.32371, 0.540147, 0.361187"
"0.365856, 0.41493, 0.758232"
"0.792871, 0.979217, 0.0309763"
"0.0509049, 0.459151, 0.996277"
"0.0305185, 0.13422, 0.306009"
]

rsmtapoffsets12 = [
"0.031084, 0.572114"
"0.040671, 0.95653"
"0.160921, 0.367819"
"0.230518, 0.134321"
"0.247078, 0.819415"
"0.428665, 0.440522"
"0.49846, 0.80717"
"0.604285, 0.0307766"
"0.684075, 0.283001"
"0.688304, 0.624171"
"0.833995, 0.832414"
"0.975397, 0.189911"
]

rsmtapoffsets20 = [
"0.00240055, 0.643992"
"0.0356464, 0.851616"
"0.101733, 0.21876"
"0.166119, 0.0278085"
"0.166438, 0.474999"
"0.24991, 0.766405"
"0.333714, 0.130407"
"0.400681, 0.374781"
"0.424067, 0.888211"
"0.448511, 0.678962"
"0.529383, 0.213568"
"0.608569, 0.47715"
"0.617996, 0.862528"
"0.631784, 0.0515881"
"0.740969, 0.20753"
"0.788203, 0.41923"
"0.794066, 0.615141"
"0.834504, 0.836612"
"0.89446, 0.0677863"
"0.975609, 0.446056"
]

rsmtapoffsets32 = [
"0.0262032, 0.215221"
"0.0359769, 0.0467256"
"0.0760799, 0.713481"
"0.115087, 0.461431"
"0.119488, 0.927444"
"0.22346, 0.319747"
"0.225964, 0.679227"
"0.238626, 0.0618425"
"0.243326, 0.535066"
"0.29832, 0.90826"
"0.335208, 0.212103"
"0.356438, 0.751969"
"0.401021, 0.478664"
"0.412027, 0.0245297"
"0.48477, 0.320659"
"0.494311, 0.834621"
"0.515007, 0.165552"
"0.534574, 0.675536"
"0.585357, 0.432483"
"0.600102, 0.94139"
"0.650182, 0.563571"
"0.672336, 0.771816"
"0.701811, 0.187078"
"0.734207, 0.359024"
"0.744775, 0.924466"
"0.763628, 0.659075"
"0.80735, 0.521281"
"0.880585, 0.107684"
"0.898505, 0.904047"
"0.902536, 0.718989"
"0.928022, 0.347802"
"0.971243, 0.504885"
]

radiancehintsshader = [
  numtaps = (cond [> $arg1 20] 32 [> $arg1 12] 20 12)
  shader 0 [radiancehints@arg1] [
    varying vec3 rhcenter;
    varying vec2 rsmcenter;
    void main(void)
    {
        gl_Position = gl_Vertex;
        rhcenter = gl_MultiTexCoord0.xyz;
        rsmcenter = (gl_TextureMatrix[0] * gl_MultiTexCoord0).xy;
    }
  ] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0, tex1, tex2; 
    uniform vec2 rsmspread;
    uniform float rhatten, rhspread;
    varying vec3 rhcenter;
    varying vec2 rsmcenter;

    void calcrhsample(vec3 rhtap, vec2 rsmtap, inout vec4 shr, inout vec4 shg, inout vec4 shb)
    {
        vec3 rhpos = rhcenter + rhtap*rhspread;
        vec2 rsmtc = rsmcenter + rsmtap*rsmspread;
        float rsmdepth = texture2DRect(tex0, rsmtc).x;
        vec3 rsmcolor = texture2DRect(tex1, rsmtc).rgb;
        vec3 rsmnormal = texture2DRect(tex2, rsmtc).xyz*2.0 - 1.0;
        vec3 rsmpos = (gl_TextureMatrixInverse[0] * vec4(rsmtc, rsmdepth, 1.0)).xyz;

        vec3 dir = rhpos - rsmpos;
        float dist = dot(dir, dir);
        if(dist > 0.000049) dir = normalize(dir);
        float atten = clamp(dot(dir, rsmnormal), 0.0, 1.0) / (0.1 + dist*rhatten);
        rsmcolor *= atten;

        shr += vec4(rsmcolor.r*dir, rsmcolor.r);
        shg += vec4(rsmcolor.g*dir, rsmcolor.g);
        shb += vec4(rsmcolor.b*dir, rsmcolor.b);
    }

    void main(void)
    {
        vec4 shr = vec4(0.0), shg = vec4(0.0), shb = vec4(0.0);

        @(loopconcat i $numtaps [result [
            calcrhsample(vec3(@(at $[rhtapoffsets@numtaps] $i))*2.0 - 1.0, vec2(@(at $[rsmtapoffsets@numtaps] $i))*2.0 - 1.0, shr, shg, shb);
        ]])

        gl_FragData[0] = shr * (vec4(0.5, 0.5, 0.5, 1.0)/@(+f $numtaps)) + vec4(0.5, 0.5, 0.5, 0.0);
        gl_FragData[1] = shg * (vec4(0.5, 0.5, 0.5, 1.0)/@(+f $numtaps)) + vec4(0.5, 0.5, 0.5, 0.0);
        gl_FragData[2] = shb * (vec4(0.5, 0.5, 0.5, 1.0)/@(+f $numtaps)) + vec4(0.5, 0.5, 0.5, 0.0);
    }
  ]
]

lazyshader 0 radiancehintsborder [
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xyz = gl_MultiTexCoord0.xyz;
    }
] [
    uniform sampler3D tex3, tex4, tex5;
    uniform vec3 bordercenter, borderrange, borderscale;
    void main(void)
    {
        float outside = clamp(borderscale.z*(abs(gl_TexCoord[0].z - bordercenter.z) - borderrange.z), 0.0, 1.0);
        vec3 tc = vec3(gl_TexCoord[0].xy, clamp(gl_TexCoord[0].z, bordercenter.z - borderrange.z, bordercenter.z + borderrange.z));
        gl_FragData[0] = texture3D(tex3, tc);
        gl_FragData[1] = texture3D(tex4, tc);
        gl_FragData[2] = mix(texture3D(tex5, tc), vec4(0.5, 0.5, 0.5, 0.0), outside);
    }
]

lazyshader 0 radiancehintscached [
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xyz = gl_MultiTexCoord0.xyz;
    }
] [
    uniform sampler3D tex6, tex7, tex8;
    void main(void)
    {
        gl_FragData[0] = texture3D(tex6, gl_TexCoord[0].xyz);
        gl_FragData[1] = texture3D(tex7, gl_TexCoord[0].xyz);
        gl_FragData[2] = texture3D(tex8, gl_TexCoord[0].xyz);
    }
]

////////////////////////////////////////////////
//
// deferred shading
//
////////////////////////////////////////////////

shader 0 shadowmapworld [
    void main(void)
    {
        gl_Position = ftransform();
    }
] [
    void main(void)
    {
    }
]

if (>= $glslversion 130) [
    shader 0 tetraclear [
        void main(void)
        {
            gl_Position = gl_Vertex;
        }
    ] [
        void main(void)
        {
        }
    ]

    shader 0 tetraworld [
        #version 130
        uniform vec4 tetraclip;
        void main(void)
        {
            gl_Position = ftransform();
            gl_ClipDistance[0] = dot(gl_Vertex, tetraclip); 
        }
    ] [
        #version 130
        void main(void)
        {
        }
    ]
]

// deferredlighttype:
//    p -> point-light shadow (default cubemap)
//    t -> tetrahedrdal point-light shadow
//    c -> CSM
//    a -> AO
//    A -> AO sun
//    g -> gather filter
//    F -> 3x3 weighted box filter
//    f -> 4x filter
//    m -> minimap
dlopt = [ >= (strstr $deferredlighttype $arg1) 0 ]

deferredlightvariantshader = [
    deferredlighttype = $arg3
    numsplits = (+ $arg4 0)
    numrh = (+ $arg5 0)
    numlights = (+ $arg6 0)
    baselight = (< (mod $arg2 4) 2)
    spotlight = (>= $arg2 4) 
    variantshader 0 $arg1 $arg2 (? (< $arg2 0) [
        void main(void)
        {
            gl_Position = ftransform();
        }
    ]) [
        #extension GL_ARB_texture_rectangle : enable
        @(if (|| (dlopt "g") (dlopt "G")) [result [
            #ifdef GL_EXT_gpu_shader4
            #  extension GL_EXT_gpu_shader4 : enable
            #endif
            @(if (> $usetexgather 1) [result [
                #ifdef GL_ARB_gpu_shader5
                #  extension GL_ARB_gpu_shader5 : enable
                #endif
            ]])
            #ifdef GL_ARB_texture_gather
            #  extension GL_ARB_texture_gather : enable
            #else
            #  ifdef GL_AMD_texture_texture4
            #    extension GL_AMD_texture_texture4 : enable
            #  endif
            #endif
        ]])
        uniform sampler2DRect tex0, tex1, tex2, tex3;
        @(if (|| (dlopt "p") (dlopt "c")) [
            if (|| (dlopt "g") (dlopt "G")) [if (> $usetexgather 1) [result [
                #if defined(GL_ARB_texture_gather) && defined(GL_ARB_gpu_shader5)
                    uniform sampler2DShadow tex4;
                #else
                    uniform sampler2D tex4;
                #endif
            ]] [result [
                uniform sampler2D tex4;
            ]]] [result [
                uniform sampler2DRectShadow tex4;
            ]]
        ])
        @(if $numlights [result [
            uniform vec4 lightpos[@@numlights];
            uniform vec3 lightcolor[@@numlights];
            @(if $spotlight [result [
                uniform vec4 spotparams[@@numlights];
            ]])
            @(if (dlopt "p") [result [
                @(if $spotlight [result [
                    uniform vec3 spotx[@@numlights];
                    uniform vec3 spoty[@@numlights];
                ]])
                uniform vec4 shadowparams[@@numlights];
                uniform vec2 shadowoffset[@@numlights];
            ]])
        ]])
        @(if $numsplits [result [
            uniform vec3 splitcenter[@@numsplits];
            uniform vec3 splitbounds[@@numsplits];
            uniform vec3 splitscale[@@numsplits];
            uniform vec3 splitoffset[@@numsplits];
        ]])
        @(if (dlopt "c") [result [
            uniform vec3 sunlightdir;
            uniform vec3 sunlightcolor;
            @(if (dlopt "r") [result [
                uniform float giscale, rhnudge;
                uniform vec4 rhbb[@@numrh];
                uniform vec3 rhscale[@@numrh];
                uniform vec3 rhoffset[@@numrh];
                uniform sampler3D tex6, tex7, tex8;
            ]])  
        ]])
        uniform vec3 camera;
        uniform vec4 fogdir;
        uniform vec3 fogcolor, fogparams;
        uniform vec2 shadowatlasscale;
        uniform vec4 lightscale;
        @(? (dlopt "a") [uniform sampler2DRect tex5; uniform vec2 aoscale; uniform vec4 aoparams;])
        @(gdepthunpackparams)

        @(if (dlopt "p") [
            if $spotlight [result [
                vec3 getspottc(vec3 dir, float spotdist, vec3 spotx, vec3 spoty, vec4 shadowparams, vec2 shadowoffset)
                {
                    vec2 mparams = shadowparams.xy / spotdist;
                    return vec3(vec2(dot(dir, spotx), dot(dir, spoty))*mparams.x + shadowoffset, mparams.y + shadowparams.w);
                }
            ]] [if (dlopt "t") [result [
                vec3 getshadowtc(vec3 dir, vec4 shadowparams, vec2 shadowoffset)
                {
                    float top = abs(dir.x+dir.y)+dir.z, bottom = abs(dir.x-dir.y)-dir.z;
                    vec2 mparams = shadowparams.xy / max(top, bottom);
                    shadowoffset.x += step(top, bottom)*shadowparams.z;
                    return vec3(dir.xy*mparams.x + shadowoffset, mparams.y + shadowparams.w);
                }
            ]] [result [
                vec3 getshadowtc(vec3 dir, vec4 shadowparams, vec2 shadowoffset)
                {
                    vec3 adir = abs(dir);
                    float m = max(adir.x, adir.y);
                    vec2 mparams = shadowparams.xy / max(adir.z, m);
                    vec4 proj;
                    if(adir.x > adir.y) proj = vec4(dir.zyx, 0.0); else proj = vec4(dir.xzy, 1.0);
                    if(adir.z > m) proj = vec4(dir, 2.0);
                    return vec3(proj.xy * mparams.x + vec2(proj.w, step(proj.z, 0.0)) * shadowparams.z + shadowoffset, mparams.y + shadowparams.w);
                }
            ]]]
        ])

        @(if (|| (dlopt "p") (dlopt "c")) [
            if (dlopt "G") [result [
                #ifdef GL_ARB_texture_gather
                @(if (> $usetexgather 1) [result [
                #  ifdef GL_ARB_gpu_shader5
                #      define shadowgather(center, xoff, yoff) textureGatherOffset(tex4, center, shadowtc.z, ivec2(xoff, yoff))
                #    else
                #      define shadowgather(center, xoff, yoff) step(shadowtc.z, textureGatherOffset(tex4, center, ivec2(xoff, yoff)))
                #  endif
                ]] [result [
                #  define shadowgather(center, xoff, yoff) step(shadowtc.z, textureGatherOffset(tex4, center, ivec2(xoff, yoff)))
                ]])
                #else
                #  define shadowgather(center, xoff, yoff) step(shadowtc.z, texture4(tex4, center + vec2(xoff, yoff)*shadowatlasscale))
                #endif
                float filtershadow(vec3 shadowtc)
                {
                    vec2 offset = fract(shadowtc.xy - 0.5), center = (shadowtc.xy - offset)*shadowatlasscale;
                    vec4 group1 = shadowgather(center, -2.0, -2.0);
                    vec4 group2 = shadowgather(center,  0.0, -2.0);
                    vec4 group3 = shadowgather(center,  2.0, -2.0);
                    vec4 group4 = shadowgather(center, -2.0,  0.0);
                    vec4 group5 = shadowgather(center,  0.0,  0.0);
                    vec4 group6 = shadowgather(center,  2.0,  0.0);
                    vec4 group7 = shadowgather(center, -2.0,  2.0);
                    vec4 group8 = shadowgather(center,  0.0,  2.0);
                    vec4 group9 = shadowgather(center,  2.0,  2.0);
                    vec4 locols = vec4(group1.ab, group3.ab);
                    vec4 hicols = vec4(group7.rg, group9.rg);
                    locols.yz += group2.ab;
                    hicols.yz += group8.rg;
                    vec4 midcols = vec4(group1.rg, group3.rg) + vec4(group7.ab, group9.ab) +
                                   vec4(group4.rg, group6.rg) + vec4(group4.ab, group6.ab) +
                                   mix(locols, hicols, offset.y);
                    vec4 cols = group5 + vec4(group2.rg, group8.ab);
                    cols.xyz += mix(midcols.xyz, midcols.yzw, offset.x);
                    return dot(cols, vec4(1.0/25.0));
                }
            ]] [if (dlopt "g") [result [
                #ifdef GL_ARB_texture_gather
                @(if (> $usetexgather 1) [result [
                #  ifdef GL_ARB_gpu_shader5
                #      define shadowgather(center, xoff, yoff) textureGatherOffset(tex4, center, shadowtc.z, ivec2(xoff, yoff))
                #    else
                #      define shadowgather(center, xoff, yoff) step(shadowtc.z, textureGatherOffset(tex4, center, ivec2(xoff, yoff)))
                #  endif
                ]] [result [
                #  define shadowgather(center, xoff, yoff) step(shadowtc.z, textureGatherOffset(tex4, center, ivec2(xoff, yoff)))
                ]])
                #else
                #  define shadowgather(center, xoff, yoff) step(shadowtc.z, texture4(tex4, center + vec2(xoff, yoff)*shadowatlasscale))
                #endif
                float filtershadow(vec3 shadowtc)
                {
                    vec2 offset = fract(shadowtc.xy - 0.5), center = (shadowtc.xy - offset)*shadowatlasscale;
                    vec4 group1 = shadowgather(center, -1.0, -1.0);
                    vec4 group2 = shadowgather(center,  1.0, -1.0);
                    vec4 group3 = shadowgather(center, -1.0,  1.0);
                    vec4 group4 = shadowgather(center,  1.0,  1.0);
                    vec4 cols = vec4(group1.rg, group2.rg) + vec4(group3.ab, group4.ab) + mix(vec4(group1.ab, group2.ab), vec4(group3.rg, group4.rg), offset.y);
                    return dot(mix(cols.xyz, cols.yzw, offset.x), vec3(1.0/9.0));
                }
            ]] [if (dlopt "E") [result [
                #define shadowval(xy) shadow2DRect(tex4, vec3(xy, shadowtc.z)).r
                float filtershadow(vec3 shadowtc)
                {
                    vec2 offset = fract(shadowtc.xy - 0.5);
                    vec4 center = vec4(shadowtc.xy - offset + 0.5, shadowtc.xy - offset*0.5);
                    vec4 size = vec4(offset + 1.0, 2.0 - offset);
                    return (1.0/25.0)*dot(size.zxzx*size.wwyy, 
                            vec4(shadowval(center.zw - 1.5), 
                                 shadowval(center.zw + vec2(2.0, -1.5)), 
                                 shadowval(center.zw + vec2(-1.5, 2.0)), 
                                 shadowval(center.zw + 2.0))) + 
                           (2.0/25.0)*dot(size, 
                            vec4(shadowval(center.zy + vec2(2.0, 0.0)), 
                                 shadowval(center.xw + vec2(0.0, 2.0)),
                                 shadowval(center.zy + vec2(-1.5, 0.0)),
                                 shadowval(center.xw + vec2(0.0, -1.5)))) +
                           (4.0/25.0)*shadowval(center.xy);
                }   
            ]] [if (dlopt "F") [result [
                #define shadowval(center, xyoff) shadow2DRect(tex4, vec3(center.xy + xyoff, center.z)).r
                float filtershadow(vec3 shadowtc)
                {
                    vec2 offset = fract(shadowtc.xy - 0.5);
                    vec3 center = shadowtc;
                    //center.xy -= offset;
                    //vec4 size = vec4(offset + 1.0, 2.0 - offset), weight = vec4(2.0 - 1.0 / size.xy, 1.0 / size.zw - 1.0);
                    //return (1.0/9.0)*dot(size.zxzx*size.wwyy,
                    //    vec4(shadowval(center, weight.zw),
                    //         shadowval(center, weight.xw),
                    //         shadowval(center, weight.zy),
                    //         shadowval(center, weight.xy)));
                    center.xy -= offset*0.5;
                    vec4 size = vec4(offset + 1.0, 2.0 - offset);
                    return (1.0/9.0)*dot(size.zxzx*size.wwyy,
                        vec4(shadowval(center, -0.5),
                             shadowval(center, vec2(1.0, -0.5)),
                             shadowval(center, vec2(-0.5, 1.0)),
                             shadowval(center, 1.0)));
                }
            ]] [if (dlopt "f") [result [
                #define shadowval(center, xoff, yoff) shadow2DRect(tex4, center + vec3(xoff, yoff, 0.0)).r
                float filtershadow(vec3 shadowtc)
                {
                    return dot(vec4(0.25),
                                vec4(shadowval(shadowtc, -0.4, 1.0),
                                    shadowval(shadowtc, -1.0, -0.4),
                                    shadowval(shadowtc, 0.4, -1.0),
                                    shadowval(shadowtc, 1.0, 0.4))); 
                }
            ]] [result [
                #define filtershadow(shadowtc) shadow2DRect(tex4, shadowtc).r
            ]]]]]]
        ])

        @(if (dlopt "c") [result [
            vec3 getcsmtc(vec3 pos)
            {
                pos = (gl_TextureMatrix[1] * vec4(pos, 0.0)).xyz;
                @(loopconcat j (- $numsplits 1) [result [
                    if(all(lessThan(abs(pos - splitcenter[@@j]), splitbounds[@@j])))
                        pos = pos*splitscale[@@j] + splitoffset[@@j];
                    else
                ]])
                if(all(lessThan(abs(pos.xy - splitcenter[@@(- $numsplits 1)].xy), splitbounds[@@(- $numsplits 1)].xy)))
                    pos = pos*splitscale[@@(- $numsplits 1)] + splitoffset[@@(- $numsplits 1)];
                else pos = vec3(-1.0);
                return pos;
            }
            
            @(if (dlopt "r") [result [
                vec3 getrhlight(vec3 pos, vec3 norm)
                {
                    vec3 tc;
                    pos += norm*rhnudge;
                    @(loopconcat j (- $numrh 1) [result [
                        if(all(lessThan(abs(pos - rhbb[@@j].xyz), vec3(rhbb[@@j].w))))
                            tc = pos*rhscale[@@j] + rhoffset[@@j];
                        else
                    ]])
                    if(all(lessThan(abs(pos - rhbb[@@(- $numrh 1)].xyz), vec3(rhbb[@@(- $numrh 1)].w))))
                        tc = pos*rhscale[@@(- $numrh 1)] + rhoffset[@@(- $numrh 1)];
                    else tc = vec3(-1.0);
                    vec4 shr = texture3D(tex6, tc), shg = texture3D(tex7, tc), shb = texture3D(tex8, tc);
                    shr.rgb -= 0.5;
                    shg.rgb -= 0.5;
                    shb.rgb -= 0.5;
                    vec4 basis = vec4(norm*-(1.023326*0.488603/3.14159*2.0), (0.886226*0.282095/3.14159));
                    return clamp(vec3(dot(basis, shr), dot(basis, shg), dot(basis, shb)), 0.0, 1.0);
                }
            ]])
        ]])
            
        void main(void)
        {
            @(if (dlopt "i") [result [
                vec2 tc = (gl_FragCoord.xy - 0.5)*2.0 + 0.5;
                @(if $baselight [result [
                    vec3 inferlight = lightscale.rgb, inferspec = vec3(0.0);
                    @(if (dlopt "a") [result [
                        float ao = texture2DRect(tex5, tc*aoscale).r;
                        inferlight *= aoparams.x + ao*aoparams.y;
                    ]])
                ]] [result [
                    vec3 inferlight = vec3(0.0), inferspec = vec3(0.0);
                ]])
            ]] [result [
                #define tc gl_FragCoord.xy
                @(if (|| $baselight [> $numlights 1]) [result [
                    vec4 diffuse = texture2DRect(tex0, tc);
                ]])
                @(if $baselight [result [
                    vec3 light = diffuse.rgb * lightscale.rgb;
                    @(if (dlopt "a") [result [
                        float ao = texture2DRect(tex5, tc*aoscale).r;
                        light *= aoparams.x + ao*aoparams.y;
                    ]]) 
                    vec3 glow = texture2DRect(tex2, tc).rgb;
                    light += glow * lightscale.a;
                ]] [result [
                    vec3 light = vec3(0.0);
                ]])
            ]])
            @(if (|| (> $numlights 0) (dlopt "c")) [result [
                @(gdepthunpack depth tex3 tc [
                    @(if (dlopt "m") [result [
                        vec3 pos = (gl_TextureMatrix[0] * vec4(tc, depth, 1.0)).xyz;
                    ]] [result [
                        vec3 pos = (gl_TextureMatrix[0] * vec4(depth*tc, depth, 1.0)).xyz;
                    ]])
                    #define fogcoord depth
                ] [
                    vec4 pos = gl_TextureMatrix[0] * vec4(tc, depth, 1.0);
                    pos.xyz /= pos.w;
                    #define fogcoord dot(fogdir, vec4(pos.xyz, 1.0))
                ])
                @(if (|| (dlopt "c") [> $numlights 1]) [result [
                    vec4 normal = texture2DRect(tex1, tc);
                    normal.xyz = normal.xyz*2.0 - 1.0;
                ]])
                @(if (&& (> (+ $numlights (dlopt "c")) 1) [! (dlopt "m")]) [result [
                    vec3 camdir = normalize(camera - pos.xyz);
                    float facing = 2.0*dot(normal.xyz, camdir);
                ]])
            ]] [if (! (dlopt "m")) [result [
                @(gdepthunpack depth tex3 tc)
                #define fogcoord depth
            ]]])
            @(if (dlopt "c") [result [
                @(if (dlopt "r") [result [
                    vec3 rhlight = @(? (! (dlopt "i")) [diffuse.rgb *]) getrhlight(pos.xyz, normal.xyz) * giscale;
                ]])
                float sunfacing = dot(sunlightdir, normal.xyz);
                if(sunfacing > 0.0)
                {
                    vec3 csmtc = getcsmtc(pos.xyz);
                    float sunoccluded = sunfacing * filtershadow(csmtc);
                    @(if (dlopt "m") [result [
                        light += diffuse.rgb * sunlightcolor * sunoccluded;
                    ]] [result [
                        @(if (= (+ $numlights (dlopt "c")) 1) [result [
                            vec3 camdir = normalize(camera - pos.xyz);
                            float facing = 2.0*dot(normal.xyz, camdir);
                        ]])
                        float sunspec = pow(clamp(sunfacing*facing - dot(camdir, sunlightdir), 0.0, 1.0), 8.0) * normal.a;
                        @(if (dlopt "r") [if (dlopt "i") [result [
                            rhlight += sunoccluded;
                            inferspec += sunspec * sunoccluded @(? (dlopt "A") [* (aoparams.z + ao*aoparams.w)]) * sunlightcolor;
                        ]] [result [
                            rhlight += (diffuse.rgb + sunspec) * sunoccluded;
                        ]]] [result [
                            @(if (dlopt "A") [result [
                                sunoccluded *= aoparams.z + ao*aoparams.w;
                            ]])
                            @(if (dlopt "i") [result [
                                inferlight += sunoccluded * sunlightcolor;
                                inferspec += sunspec * sunoccluded * sunlightcolor;
                            ]] [result [
                                light += (diffuse.rgb + sunspec) * sunoccluded * sunlightcolor;
                            ]])
                        ]])
                    ]])
                }
                @(if (dlopt "r") [result [
                    @(? (dlopt "i") [inferlight] [light]) += rhlight @(? (dlopt "A") [* (aoparams.z + ao*aoparams.w)]) * sunlightcolor;
                ]])
            ]])
            @(loopconcat j $numlights [result [
                vec3 light@[j]dir = (pos.xyz - lightpos[@@j].xyz) * lightpos[@@j].w;
                float light@[j]dist2 = dot(light@[j]dir, light@[j]dir);
                if(light@[j]dist2 < 1.0)
                {
                    @(if (&& (= $numlights 1) [! (dlopt "c")]) [result [
                        vec4 normal = texture2DRect(tex1, tc);
                        normal.xyz = normal.xyz*2.0 - 1.0;
                    ]])
                    float light@[j]facing = dot(light@[j]dir, normal.xyz);
                    if(light@[j]facing < 0.0) 
                    {
                        float light@[j]invdist = inversesqrt(light@[j]dist2); 
                        @(if $spotlight [result [
                            float spot@[j]dist = dot(light@[j]dir, spotparams[@@j].xyz);
                            float spot@[j]atten = light@[j]invdist * spot@[j]dist - spotparams[@@j].w;
                            if(spot@[j]atten > 0.0)
                            {
                        ]])
                        float light@[j]atten = light@[j]facing * (1.0 - light@[j]invdist);
                        @(if $spotlight [
                            if (dlopt "p") [result [
                                vec3 spot@[j]tc = getspottc(light@[j]dir, spot@[j]dist, spotx[@@j], spoty[@@j], shadowparams[@@j], shadowoffset[@@j]);
                                light@[j]atten *= spot@[j]atten * filtershadow(spot@[j]tc);
                            ]] [result [
                                light@[j]atten *= spot@[j]atten;
                            ]]
                        ] [
                            if (dlopt "p") [result [
                                vec3 shadow@[j]tc = getshadowtc(light@[j]dir, shadowparams[@@j], shadowoffset[@@j]);
                                light@[j]atten *= filtershadow(shadow@[j]tc);
                            ]]
                        ])
                        @(if (dlopt "i") [result [
                            @(if (= (+ $numlights (dlopt "c")) 1) [result [
                                vec3 camdir = normalize(camera - pos.xyz);
                                float facing = 2.0*dot(normal.xyz, camdir);
                            ]])
                            float light@[j]spec = pow(clamp(light@[j]invdist*(dot(camdir, light@[j]dir) - light@[j]facing*facing), 0.0, 1.0), 8.0) * normal.a;
                            inferlight += lightcolor[@@j] * light@[j]atten;
                            inferspec += light@[j]spec * lightcolor[@@j] * light@[j]atten;
                        ]] [result [
                            @(if (&& (= $numlights 1) [! $baselight]) [result [
                                vec4 diffuse = texture2DRect(tex0, tc);
                            ]])
                            @(if (dlopt "m") [result [
                                light += diffuse.rgb * lightcolor[@@j] * light@[j]atten;
                            ]] [result [
                                @(if (= (+ $numlights (dlopt "c")) 1) [result [
                                    vec3 camdir = normalize(camera - pos.xyz);
                                    float facing = 2.0*dot(normal.xyz, camdir);
                                ]])
                                float light@[j]spec = pow(clamp(light@[j]invdist*(dot(camdir, light@[j]dir) - light@[j]facing*facing), 0.0, 1.0), 8.0) * normal.a;
                                light += (diffuse.rgb + light@[j]spec) * lightcolor[@@j] * light@[j]atten;
                                @(if (= (+ $numlights $baselight) 1) [result [
                                    float foglerp = clamp((fogparams.y + fogcoord)*fogparams.z, 0.0, 1.0);
                                    light *= foglerp;
                                ]])
                            ]])
                        ]])
                        @(? $spotlight [}]) 
                    }
                }
            ]])
            @(cond [dlopt "m"] [if $baselight [result [
                gl_FragColor.rgb = light;
                gl_FragColor.a = diffuse.a;
            ]] [result [
                gl_FragColor.rgb = light;
                gl_FragColor.a = 0.0;
            ]]] [dlopt "i"] [result [
                gl_FragData[0].rgb = inferlight;
                gl_FragData[1].rgb = inferspec;
            ]] [if (|| $baselight [> $numlights 1]) [result [
                float foglerp = clamp((fogparams.y + fogcoord)*fogparams.z, 0.0, 1.0);
                @(? $baselight [
                    gl_FragColor.rgb = mix(fogcolor*diffuse.a, light, foglerp);
                    gl_FragColor.a = diffuse.a;
                ] [
                    gl_FragColor.rgb = light*foglerp;
                    gl_FragColor.a = 0.0;
                ])
            ]] [result [
                gl_FragColor.rgb = light;
                gl_FragColor.a = 0.0;
            ]]])
        }
    ] 64
]

deferredlightshader = [
    shadername = (concatword "deferredlight" $arg1 $arg2 $arg3)
    deferredlightvariantshader $shadername -1 (concatword $arg1 $arg3) $arg4 $arg5 0 // base shader, no points lights, sunlight
    loop i 8 [
        deferredlightvariantshader $shadername 0 (concatword $arg1 $arg3) $arg4 $arg5 (+ $i 1) // row 0, point lights, sunlight
        deferredlightvariantshader $shadername 1 (concatword $arg1 $arg2 $arg3) $arg4 $arg5 (+ $i 1) // row 1, shadowed point lights, sunlight
        deferredlightvariantshader $shadername 2 $arg1 $arg4 $arg5 (+ $i 1) // row 2, point lights 
        deferredlightvariantshader $shadername 3 (concatword $arg1 $arg2) $arg4 $arg5 (+ $i 1) // row 3, shadowed point lights
        deferredlightvariantshader $shadername 4 (concatword $arg1 $arg3) $arg4 $arg5 (+ $i 1) // row 4, spot lights, sunlight
        deferredlightvariantshader $shadername 5 (concatword $arg1 $arg2 $arg3) $arg4 $arg5 (+ $i 1) // row 5, shadowed spot lights, sunlight
        deferredlightvariantshader $shadername 6 $arg1 $arg4 $arg5 (+ $i 1) // row 6, spot lights 
        deferredlightvariantshader $shadername 7 (concatword $arg1 $arg2) $arg4 $arg5 (+ $i 1) // row 7, shadowed spot lights
    ]
]

lazyshader 0 "inferredlight" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        gl_TexCoord[1].xy = gl_MultiTexCoord0.xy + 0.5;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0, tex1, tex2, tex3, tex9, tex10;
    uniform vec3 camera;
    uniform vec4 fogdir;
    uniform vec3 fogcolor, fogparams;
    uniform vec4 lightscale;
    uniform vec2 inferthreshold;
    @(gdepthunpackparams)

    void main(void)
    {
        vec3 color0 = texture2DRect(tex9, gl_TexCoord[0].xy).rgb;
        vec3 color1 = texture2DRect(tex9, gl_TexCoord[1].xy).rgb;
        vec3 spec0 = texture2DRect(tex10, gl_TexCoord[0].xy).rgb;
        vec3 spec1 = texture2DRect(tex10, gl_TexCoord[1].xy).rgb;
        vec3 diff = max(abs(color1 - color0), abs(spec0 - spec1)*inferthreshold.y);
        if(max(max(diff.x, diff.y), diff.z) > inferthreshold.x) discard;

        vec4 diffuse = texture2DRect(tex0, gl_FragCoord.xy);
        vec3 light = (color0 + color1)*diffuse.rgb + spec0 + spec1;
        vec3 glow = texture2DRect(tex2, gl_FragCoord.xy).rgb;
        light += glow * lightscale.a;

        @(gdepthunpack depth tex3 gl_FragCoord.xy)
        float foglerp = clamp((fogparams.y + depth)*fogparams.z, 0.0, 1.0);
        gl_FragColor.rgb = mix(fogcolor*diffuse.a, light, foglerp);
        gl_FragColor.a = diffuse.a;
    }
]

shader 0 "hdrreduce" [
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0; 
    void main(void)
    {
        gl_FragColor.rgb = texture2DRect(tex0, gl_TexCoord[0].xy).rgb;
    }
]

shader 0 "hdrreduce2" [
    uniform vec2 reducestep;
    varying vec2 tap0, tap1, tap2, tap3;
    void main(void)
    {
        gl_Position = gl_Vertex;
        tap0 = gl_MultiTexCoord0.xy + vec2(-1.0, -1.0)*reducestep;
        tap1 = gl_MultiTexCoord0.xy + vec2( 1.0, -1.0)*reducestep;
        tap2 = gl_MultiTexCoord0.xy + vec2( 1.0,  1.0)*reducestep;
        tap3 = gl_MultiTexCoord0.xy + vec2(-1.0,  1.0)*reducestep;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0; 
    varying vec2 tap0, tap1, tap2, tap3;
    void main(void)
    {
        gl_FragColor.rgb = 0.25*(texture2DRect(tex0, tap0).rgb + texture2DRect(tex0, tap1).rgb +
                                 texture2DRect(tex0, tap2).rgb + texture2DRect(tex0, tap3).rgb);
    }
]

lumweights = "0.2126, 0.7152, 0.0722"
//lumweights = "0.299, 0.587, 0.114"

hdrgammadecode = [
    if (=f $hdrgamma 2) [result [
        @arg1 *= @arg1;
    ]] [result [
        @arg1 = pow(@arg1, vec3(hdrgamma.x));
    ]]
]

hdrgammaencode = [
    if (=f $hdrgamma 2) [result [
        @arg1 = sqrt(@arg1);
    ]] [result [
        @arg1 = pow(@arg1, vec3(hdrgamma.y));
    ]]
]

shader 0 "hdrluminance" [
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0; 
    uniform vec2 hdrgamma;
    void main(void)
    {
        vec3 color = texture2DRect(tex0, gl_TexCoord[0].xy).rgb*2.0;
        @(hdrgammadecode color)
        float lum = dot(color, vec3(@lumweights));
        float loglum = sqrt(clamp(lum, 0.015625, 4.0)) * (1.0/2.0); // allow values as low as 2^-6, and as high 2^2
        gl_FragColor.rgb = vec3(loglum);
    }
]

shader 0 "hdrluminance2" [
    uniform vec2 reducestep;
    varying vec2 tap0, tap1, tap2, tap3;
    void main(void)
    {
        gl_Position = gl_Vertex;
        tap0 = gl_MultiTexCoord0.xy + vec2(-1.0, -1.0)*reducestep;
        tap1 = gl_MultiTexCoord0.xy + vec2( 1.0, -1.0)*reducestep;
        tap2 = gl_MultiTexCoord0.xy + vec2( 1.0,  1.0)*reducestep;
        tap3 = gl_MultiTexCoord0.xy + vec2(-1.0,  1.0)*reducestep;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0; 
    uniform vec2 hdrgamma;
    varying vec2 tap0, tap1, tap2, tap3;
    void main(void)
    {
        @(loopconcat i 4 [result [
            vec3 color@[i] = texture2DRect(tex0, tap@[i]).rgb*2.0;
            @(hdrgammadecode [color@[i]])
            float lum@[i] = dot(color@[i], vec3(@lumweights));
            float loglum@[i] = sqrt(clamp(lum@[i], 0.015625, 4.0)) * (1.0/2.0);
        ]])
        gl_FragColor.rgb = vec3(0.25*(loglum0 + loglum1 + loglum2 + loglum3));
    }
]

shader 0 "hdraccum" [
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    uniform float accumscale;
    void main(void)
    {
        float lum = texture2DRect(tex0, gl_TexCoord[0].xy).r * 2.0;
        lum *= lum;
        gl_FragColor = vec4(vec3(lum*0.25), accumscale);
    }
]

shader 0 "hdrbloom" [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex2; 
    uniform vec4 hdrparams;
    varying float lumscale, lumthreshold;
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        float avglum = 4.0*texture2DRect(tex2, vec2(0.5, 0.5)).r;
        lumscale = hdrparams.x * -log2(1.0 - clamp(avglum, 0.03, 0.3))/(avglum + 1e-4);
        lumthreshold = -log2(1.0 - hdrparams.z);
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0; 
    uniform vec2 hdrgamma;
    varying float lumscale, lumthreshold;
    void main(void)
    {
        vec3 color = texture2DRect(tex0, gl_TexCoord[0].xy).rgb*2.0;
        @(hdrgammadecode color)
        float lum = dot(color, vec3(@lumweights));
        color *= max(lum*lumscale - lumthreshold, 0.0) / (lum + 1e-4);
        @(hdrgammaencode color)
        gl_FragColor.rgb = color;
    }
]

shader 0 "hdrtonemap" [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex2; 
    uniform vec4 hdrparams;
    varying float lumscale, lumsaturate;
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        gl_TexCoord[1].xy = gl_MultiTexCoord1.xy;
        float avglum = 4.0*texture2DRect(tex2, vec2(0.5, 0.5)).r;
        lumscale = hdrparams.x * -log2(1.0 - clamp(avglum, 0.03, 0.3))/(avglum + 1e-4);
        lumsaturate = -log2(1.0 - hdrparams.y) / lumscale;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0, tex1;
    uniform vec4 hdrparams;
    uniform vec2 hdrgamma;
    varying float lumscale, lumsaturate;
    void main(void)
    {
        vec3 color = texture2DRect(tex0, gl_TexCoord[0].xy).rgb*2.0;
        vec3 bloom = texture2DRect(tex1, gl_TexCoord[1].xy).rgb*hdrparams.w;
        color += bloom;
        @(hdrgammadecode color)
//        color = 1.0 - exp2(-color*lumscale);
        float lum = dot(color, vec3(@lumweights));
        color = min(color, lumsaturate);
        color *= (1.0 - exp2(-lum*lumscale)) / (dot(color, vec3(@lumweights)) + 1e-4);
        @(hdrgammaencode color)
        gl_FragColor.rgb = color;
    }
]

lazyshader 0 "hdrtonemapluma" [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex2; 
    uniform vec4 hdrparams;
    varying float lumscale, lumsaturate;
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        gl_TexCoord[1].xy = gl_MultiTexCoord1.xy;
        float avglum = 4.0*texture2DRect(tex2, vec2(0.5, 0.5)).r;
        lumscale = hdrparams.x * -log2(1.0 - clamp(avglum, 0.03, 0.3))/(avglum + 1e-4);
        lumsaturate = -log2(1.0 - hdrparams.y) / lumscale;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0, tex1;
    uniform vec4 hdrparams;
    uniform vec2 hdrgamma;
    varying float lumscale, lumsaturate;
    void main(void)
    {
        vec3 color = texture2DRect(tex0, gl_TexCoord[0].xy).rgb*2.0;
        vec3 bloom = texture2DRect(tex1, gl_TexCoord[1].xy).rgb*hdrparams.w;
        color += bloom;
        @(hdrgammadecode color)
//        color = 1.0 - exp2(-color*lumscale);
        float lum = dot(color, vec3(@lumweights));
        color = min(color, lumsaturate);
        color *= (1.0 - exp2(-lum*lumscale)) / (dot(color, vec3(@lumweights)) + 1e-4);
        @(hdrgammaencode color)
        gl_FragColor = vec4(color, dot(color, vec3(@lumweights)));
    }
]

shader 0 "hdrnop" [
    void main(void)
    {
        gl_Position = gl_Vertex;
    }
] [ 
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        gl_FragColor = texture2DRect(tex0, gl_FragCoord.xy);
    }
]   

lazyshader 0 "hdrnopluma" [
    void main(void)
    {
        gl_Position = gl_Vertex;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        vec3 color = texture2DRect(tex0, gl_FragCoord.xy).rgb;
        gl_FragColor = vec4(color, dot(color, vec3(@lumweights)));
    }
]

lazyshader 0 "scale" [
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        gl_FragColor = texture2DRect(tex0, gl_TexCoord[0].xy);
    }
]

aotapoffsets = [
"-0.933103, 0.025116"
"-0.432784, -0.989868"
"0.432416, -0.413800"
"-0.117770, 0.970336"
"0.837276, 0.531114"
"-0.184912, 0.200232"
"-0.955748, 0.815118"
"0.946166, -0.998596"
"-0.897519, -0.581102"
"0.979248, -0.046602"
"-0.155736, -0.488204"
"0.460310, 0.982178"
]

ambientobscurancevariantshader = [
    lineardepth = (>= (strstr $arg2 "l") 0)
    maxaotaps = $arg3 
    shader 0 $arg1 [
        void main(void)
        {
            gl_Position = gl_Vertex;
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
            gl_TexCoord[1].xy = gl_MultiTexCoord1.xy;
        }
    ] [
        #extension GL_ARB_texture_rectangle : enable
        uniform sampler2DRect tex0, tex1;
        uniform sampler2D tex2;
        uniform vec3 tapparams;
        uniform vec2 contrastparams;
        uniform vec4 offsetscale;
        @(? $lineardepth [
            #define depthtc gl_FragCoord.xy
        ] [
            #define depthtc gl_TexCoord[0].xy
        ])
        @(gdepthunpackparams)
        void main(void)
        {
            @(gdepthunpack depth tex0 depthtc [
                vec2 tapscale = tapparams.xy/depth;
            ] [
                float w = depth*gdepthscale.y + gdepthscale.z;
                depth = gdepthscale.x/w;
                vec2 tapscale = tapparams.xy*w;
            ] $lineardepth)
            vec2 pos = depth*(depthtc*offsetscale.xy + offsetscale.zw);
            vec3 normal = texture2DRect(tex1, gl_TexCoord[0].xy).rgb*2.0 - 1.0;
            normal = (gl_ModelViewMatrix * vec4(normal, 0.0)).xyz;
            vec2 noise = texture2D(tex2, gl_TexCoord[1].xy).rg*2.0-1.0;
            float obscure = 0.0;
            @(loopconcat i $maxaotaps [result [
                vec2 offset@[i] = reflect(vec2(@(at $aotapoffsets $i)), noise);
                offset@[i] = depthtc + tapscale * offset@[i];
                @(gdepthunpack [depth@[i]] tex0 [offset@[i].xy] [] [] $lineardepth)
                vec3 v@[i] = vec3(depth@[i]*(offset@[i].xy*offsetscale.xy + offsetscale.zw) - pos, depth@[i] - depth);
                float dist2@[i] = dot(v@[i], v@[i]);
                obscure += step(dist2@[i], tapparams.z) * max(0.0, dot(v@[i], normal) + depth*1.0e-2) / (dist2@[i] + 1.0e-5);
            ]])
            gl_FragColor.rg = vec2(pow(clamp(1.0 - contrastparams.x*obscure, 0.0, 1.0), contrastparams.y), depth);
        }
    ]
]

ambientobscuranceshader = [
    ambientobscurancevariantshader (format "ambientobscurance%1%2" $arg1 $arg2) $arg1 $arg2
]

shader 0 "linearizedepth" [
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    @(gdepthunpackparams)
    void main(void)
    {
        @(gdepthunpack depth tex0 gl_TexCoord[0].xy)
        gl_FragColor.r = depth;
    }
] 

bilateralvariantshader = [
    reduced = (>= (strstr $arg2 "r") 0)
    linear = (>= (strstr $arg2 "l") 0)
    packed = (>= (strstr $arg2 "p") 0)
    numtaps = $arg3
    filterdir = $arg4
    shader 0 $arg1 [
        void main(void)
        {
            gl_Position = gl_Vertex;
            @(? (&& (! $linear) $reduced) [gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;])
        }
    ] [
        #extension GL_ARB_texture_rectangle : enable
        uniform sampler2DRect tex0;
        @(? (! $packed) [uniform sampler2DRect tex1;])
        uniform vec4 bilateralparams;
        @(? (=s $filterdir "x") [
            #define tapoffset(i) vec2(i, 0.0)
            #define viewoffset(i) vec2(i*bilateralparams.z, 0.0)
        ] [
            #define tapoffset(i) vec2(0.0, i)
            #define viewoffset(i) vec2(0.0, i*bilateralparams.w)
        ])
        @(gdepthunpackparams)
        void main(void)
        {
            @(if $linear [if $packed [result [
                vec2 vals = texture2DRect(tex0, gl_FragCoord.xy).rg;
                #define depth vals.y
                #define color vals.x
            ]] [result [
                vec2 tc = gl_FragCoord.xy;
                float depth = texture2DRect(tex1, tc).r;
                float color = texture2DRect(tex0, tc).r;
            ]]] [if $reduced [result [
                @(gdepthunpack depth tex1 gl_TexCoord[0].xy)
                float color = texture2DRect(tex0, gl_FragCoord.xy).r;
            ]] [result [
                vec2 tc = gl_FragCoord.xy;
                @(gdepthunpack depth tex1 tc)
                float color = texture2DRect(tex0, tc).r;
            ]]])
            float weights = 1.0;
            @(loopconcat i (* 2 $numtaps) [
                curtap = (- $i $numtaps)
                if (>= $curtap 0) [curtap = (+ $curtap 1)]
                result [
                    @(if $linear [if $packed [result [
                        vec2 vals@[i] = texture2DRect(tex0, gl_FragCoord.xy + tapoffset(@(+f $curtap))).rg;
                        #define depth@[i] vals@[i].y
                        #define color@[i] vals@[i].x
                    ]] [result [
                        vec2 tc@[i] = gl_FragCoord.xy + tapoffset(@(+f $curtap));
                        float depth@[i] = texture2DRect(tex1, tc@[i]).r;
                        float color@[i] = texture2DRect(tex0, tc@[i]).r;
                    ]]] [if $reduced [result [
                        @(gdepthunpack [depth@[i]] tex1 [gl_TexCoord[0].xy + viewoffset(@(+f $curtap))])
                        float color@[i] = texture2DRect(tex0, gl_FragCoord.xy + tapoffset(@(+f $curtap))).r;
                    ]] [result [
                        vec2 tc@[i] = gl_FragCoord.xy + tapoffset(@(+f $curtap));
                        @(gdepthunpack [depth@[i]] tex1 [tc@[i]])
                        float color@[i] = texture2DRect(tex0, tc@[i]).r;
                    ]]])
                    depth@[i] -= depth;
                    float weight@[i] = exp(@(-f 0 (* $curtap $curtap))*bilateralparams.x - depth@[i]*depth@[i]*bilateralparams.y); 
                    weights += weight@[i];
                    color += weight@[i] * color@[i];
                ]
            ])
            @(? $packed [
                gl_FragColor.rg = vec2(color / weights, depth);
            ] [
                gl_FragColor.rgb = vec3(color / weights);
            ])
        }
    ]
]

bilateralshader = [
    bilateralvariantshader (format "bilateralx%1%2" $arg1 $arg2) $arg1 $arg2 x
    bilateralvariantshader (format "bilateraly%1%2" $arg1 $arg2) $arg1 $arg2 y
]

////////////////////////////////////////////////
//
// separable blur with up to 7 taps
//
////////////////////////////////////////////////

blurshader = [
    shader 0 $arg1 [
        uniform float offsets[8];
        void main(void)
        {
            gl_Position = gl_Vertex;
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
            vec2 tc1 = gl_MultiTexCoord0.xy, tc2 = gl_MultiTexCoord0.xy;
            tc1.@arg3 += offsets[1];
            tc2.@arg3 -= offsets[1];
            gl_TexCoord[1].xy = tc1;
            gl_TexCoord[2].xy = tc2;
            @(loopconcat i (min (- $arg2 1) 2) [concatword [
                tc1.@arg3 = gl_MultiTexCoord0.@arg3 + offsets[@@(+ $i 2)];
                tc2.@arg3 = gl_MultiTexCoord0.@arg3 - offsets[@@(+ $i 2)];
                gl_TexCoord[@@(+ (* $i 2) 3)].xy = tc1;
                gl_TexCoord[@@(+ (* $i 2) 4)].xy = tc2;
            ]])
        } 
    ] [
        @(if (=s $arg4 "2DRect") [result [
            #extension GL_ARB_texture_rectangle : enable
        ]])
        uniform float weights[8];
        uniform float offsets[8];
        uniform sampler@[arg4] tex0;
        void main(void)
        {
            #define texval(coords) texture@[arg4](tex0, (coords))
            vec4 val = texval(gl_TexCoord[0].xy) * weights[0];
            @(loopconcat i $arg2 [
                if (< $i 3) [result [
                    val += weights[@@(+ $i 1)] * (texval(gl_TexCoord[@@(+ (* $i 2) 1)].xy) + texval(gl_TexCoord[@@(+ (* $i 2) 2)].xy));
                ]] [result [
                    val += weights[@@(+ $i 1)] * 
                    @(if (=s $arg3 "x") [result [
                        (texval(vec2(gl_TexCoord[0].x + offsets[@@(+ $i 1)], gl_TexCoord[0].y)) + texval(vec2(gl_TexCoord[0].x - offsets[@@(+ $i 1)], gl_TexCoord[0].y)));
                    ]] [result [
                        (texval(vec2(gl_TexCoord[0].x, gl_TexCoord[0].y + offsets[@@(+ $i 1)])) + texval(vec2(gl_TexCoord[0].x, gl_TexCoord[0].y - offsets[@@(+ $i 1)])));
                    ]])
                ]]
            ])
            gl_FragColor = val;
        }
    ]
]

loop i 7 [
    blurshader (format "blurx%1" (+ $i 1)) (+ $i 1) x 2D
    blurshader (format "blury%1" (+ $i 1)) (+ $i 1) y 2D
    if (> $i 0) [
        altshader (format "blurx%1" (+ $i 1)) (format "blurx%1" $i)
        altshader (format "blury%1" (+ $i 1)) (format "blury%1" $i)
    ]
    if $usetexrect [
        blurshader (format "blurx%1rect" (+ $i 1)) (+ $i 1) x 2DRect
        blurshader (format "blury%1rect" (+ $i 1)) (+ $i 1) y 2DRect
        if (> $i 0) [
            altshader (format "blurx%1rect" (+ $i 1)) (format "blurx%1rect" $i)
            altshader (format "blury%1rect" (+ $i 1)) (format "blury%1rect" $i)
        ]
    ]
]

////////////////////////////////////////////////
//
// full screen shaders: 
//
////////////////////////////////////////////////

fsvs = [
    void main(void)
    {
        gl_Position = gl_Vertex;   // woohoo, no mvp :) 
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
]

fsps = [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0; 
    void main(void)
    {
        vec4 sample = texture2DRect(tex0, gl_TexCoord[0].xy);
]

setup4corners = [
    gl_TexCoord[1].xy = gl_MultiTexCoord0.xy + vec2(-1.5, -1.5);
    gl_TexCoord[2].xy = gl_MultiTexCoord0.xy + vec2( 1.5, -1.5);
    gl_TexCoord[3].xy = gl_MultiTexCoord0.xy + vec2(-1.5,  1.5);
    gl_TexCoord[4].xy = gl_MultiTexCoord0.xy + vec2( 1.5,  1.5);
]

sample4corners = [
    vec4 s00 = texture2DRect(tex0, gl_TexCoord[1].xy);
    vec4 s02 = texture2DRect(tex0, gl_TexCoord[2].xy);
    vec4 s20 = texture2DRect(tex0, gl_TexCoord[3].xy);
    vec4 s22 = texture2DRect(tex0, gl_TexCoord[4].xy);
]

// some simple ones that just do an effect on the RGB value...

lazyshader 0 "invert" [ @fsvs } ] [ @fsps gl_FragColor = 1.0 - sample; } ]
lazyshader 0 "gbr"    [ @fsvs } ] [ @fsps gl_FragColor = sample.yzxw; } ]
lazyshader 0 "bw"     [ @fsvs } ] [ @fsps gl_FragColor = vec4(dot(sample.xyz, vec3(0.333))); } ]

// sobel

lazyshader 0 "sobel" [ @fsvs @setup4corners } ] [
    @fsps
    @sample4corners

        vec4 t = s00 + s20 - s02 - s22;
        vec4 u = s00 + s02 - s20 - s22;
        gl_FragColor = sample + t*t + u*u;
    }
]

// rotoscope

lazyshader 0 "rotoscope" [
    uniform vec4 params;
    void main(void)
    {
        gl_Position = gl_Vertex;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;

        // stuff two sets of texture coordinates into each one to get around hardware attribute limits
        gl_TexCoord[1] = vec4(-1.0, -1.0,  1.0, 0.0)*params.x + gl_MultiTexCoord0.xyyx;
        gl_TexCoord[2] = vec4(-1.0,  0.0, -1.0, 1.0)*params.x + gl_MultiTexCoord0.xyyx;
        gl_TexCoord[3] = vec4(-1.0,  1.0,  0.0, 1.0)*params.x + gl_MultiTexCoord0.xyyx;
        gl_TexCoord[4] = vec4( 0.0, -1.0,  1.0, 1.0)*params.x + gl_MultiTexCoord0.xyyx;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0; 
    void main(void)
    {
        #define t11 gl_TexCoord[0]
        #define t00_12 gl_TexCoord[1]
        #define t01_20 gl_TexCoord[2]
        #define t02_21 gl_TexCoord[3]
        #define t10_22 gl_TexCoord[4]
        vec4 c00 = texture2DRect(tex0, t00_12.xy);
        vec4 c01 = texture2DRect(tex0, t01_20.xy);
        vec4 c02 = texture2DRect(tex0, t02_21.xy);
        vec4 c10 = texture2DRect(tex0, t10_22.xy);
        vec4 c11 = texture2DRect(tex0, t11.xy);
        vec4 c12 = texture2DRect(tex0, t00_12.wz);
        vec4 c20 = texture2DRect(tex0, t01_20.wz);
        vec4 c21 = texture2DRect(tex0, t02_21.wz);
        vec4 c22 = texture2DRect(tex0, t10_22.wz);

        vec4 diag1 = c00 - c22;
        vec4 diag2 = c02 - c20;
        vec4 xedge = (c01 - c21)*2.0 + diag1 + diag2;
        vec4 yedge = (c10 - c12)*2.0 + diag1 - diag2;
        xedge *= xedge;
        yedge *= yedge;

        vec4 xyedge = xedge + yedge;
        float sobel = step(max(xyedge.x, max(xyedge.y, xyedge.z)), 0.1);

        float hue = dot(c11.xyz, vec3(1.0));
        c11 /= hue;
        vec3 cc = step(vec3(0.2, 0.8, 1.5), vec3(hue));
        c11 *= dot(cc, vec3(0.5, 0.5, 1.5)); 
        
        gl_FragColor = c11 * max(cc.z, sobel);
        
    }
]

blur3shader = [
    lazyshader 0 $arg1 [ 
        void main(void)
        {
            gl_Position = gl_Vertex;
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + vec2(@(if $arg2 -0.5 0.0), @(if $arg3 -0.5 0.0));
            gl_TexCoord[1].xy = gl_MultiTexCoord0.xy + vec2(@(if $arg2  0.5 0.0), @(if $arg3  0.5 0.0));
        }
    ] [
        #extension GL_ARB_texture_rectangle : enable
        uniform sampler2DRect tex0; 
        void main(void)
        {
            gl_FragColor = 0.5*(texture2DRect(tex0, gl_TexCoord[0].xy) + texture2DRect(tex0, gl_TexCoord[1].xy));
        }
    ]
]
blur3shader hblur3 1 0
blur3shader vblur3 0 1

blur5shader = [
    lazyshader 0 $arg1 [ 
        @fsvs 
            gl_TexCoord[1].xy = gl_MultiTexCoord0.xy + vec2(@(if $arg2 -1.333 0.0), @(if $arg3 -1.333 0.0));
            gl_TexCoord[2].xy = gl_MultiTexCoord0.xy + vec2(@(if $arg2  1.333 0.0), @(if $arg3  1.333 0.0));
        }
    ] [
        #extension GL_ARB_texture_rectangle : enable
        uniform sampler2DRect tex0; 
        void main(void)
        {
            gl_FragColor = 0.4*texture2DRect(tex0, gl_TexCoord[0].xy) + 0.3*(texture2DRect(tex0, gl_TexCoord[1].xy) + texture2DRect(tex0, gl_TexCoord[2].xy));
        }
    ]
]
blur5shader hblur5 1 0
blur5shader vblur5 0 1

rotoscope = [
    clearpostfx
    if (>= $numargs 1) [addpostfx rotoscope 0 0 0 $arg1]
    if (>= $numargs 2) [
        if (= $arg2 1) [addpostfx hblur3; addpostfx vblur3]
        if (= $arg2 2) [addpostfx hblur5; addpostfx vblur5]
    ]
]

////////////////////////////////////////////////
//
// miscellaneous effect shaders: 
//
////////////////////////////////////////////////

// wobbles the vertices of an explosion sphere
// and generates all texcoords 
// and blends the edge color
// and modulates the texture
explosionshader = [
    shader 0 $arg1 [
        #pragma CUBE2_fog
        uniform vec4 center, animstate;
        @(if (>= (strstr $arg1 "3d") 0) [result [uniform vec4 texgenS, texgenT;]])
        @(if (>= (strstr $arg1 "soft") 0) [result [
            uniform vec4 softparams;
            varying float softdepth;
        ]]) 
        void main(void)
        {
            vec4 wobble = vec4(gl_Vertex.xyz*(1.0 + 0.5*abs(fract(dot(gl_Vertex.xyz, center.xyz) + animstate.w*0.002) - 0.5)), gl_Vertex.w);
            gl_Position = gl_ModelViewProjectionMatrix * wobble;
            @(if (>= (strstr $arg1 "soft") 0) [result [
                softdepth = softparams.y + (gl_ModelViewMatrix * wobble).z*softparams.x;
            ]])

            gl_FrontColor = gl_Color;
        
            @arg2 
        } 
    ] [ 
        @(if (>= (strstr $arg1 "soft") 0) [result [
            #extension GL_ARB_texture_rectangle : enable
            uniform sampler2DRect tex2;
            uniform vec4 softparams;
            varying float softdepth;
            @(gdepthunpackparams)
        ]])
        uniform sampler2D tex0, tex1;
        void main(void)
        {
            vec2 dtc = gl_TexCoord[0].xy + texture2D(tex0, @arg3.xy).xy*0.1; // use color texture as noise to distort texcoords
            vec4 diffuse = texture2D(tex0, dtc);
            vec4 blend = texture2D(tex1, gl_TexCoord[1].xy); // get blend factors from modulation texture 
            diffuse *= blend.a*4.0; // dup alpha into RGB channels + intensify and over saturate
            diffuse.b += 0.5 - blend.a*0.5; // blue tint 

            @(if (>= (strstr $arg1 "soft") 0) [result [
                gl_FragColor.rgb = diffuse.rgb * gl_Color.rgb;

                @(gdepthunpack depth tex2 gl_FragCoord.xy)
                gl_FragColor.a = diffuse.a * max(clamp(depth*softparams.x - softdepth, 0.0, 1.0) * gl_Color.a, softparams.w);
            ]] [result [
                gl_FragColor = diffuse * gl_Color;
            ]])
        }
    ]
]

loop i 2 [
    explosionshader (concatword "explosion2d" (at ["" "soft"] $i)) [
        //blow up the tex coords
        float dtc = 1.768 - animstate.x*1.414; // -2, 2.5; -> -2*sqrt(0.5), 2.5*sqrt(0.5);
        dtc *= dtc;
        gl_TexCoord[0].xy = animstate.w*0.0004 + dtc*gl_Vertex.xy;
        gl_TexCoord[1].xy = gl_Vertex.xy*0.5 + 0.5; //using wobble makes it look too spherical at a distance
    ] "gl_TexCoord[1]"
    explosionshader (concatword "explosion3d" (at ["" "soft"] $i)) [
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        vec2 texgen = vec2(dot(texgenS, gl_Vertex), dot(texgenT, gl_Vertex)); 
        gl_TexCoord[1].xy = texgen;
        gl_TexCoord[2].xy = texgen - animstate.w*0.0005;
    ] "gl_TexCoord[2]"
]

shader 0 "particlenotexture" [
    #pragma CUBE2_fog
    uniform vec4 colorscale;
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_Color * colorscale;
    } 
] [
    void main(void)
    {
        gl_FragColor = gl_TexCoord[0];
    }
]

particleshader = [
    shader 0 $arg1 [
        #pragma CUBE2_fog
        uniform vec4 colorscale;
        @(if (>= (strstr $arg1 "soft") 0) [result [
            uniform vec4 softparams;
            varying float softdepth;
        ]])
        void main(void)
        {
            gl_Position = ftransform();
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
            gl_TexCoord[1] = gl_Color * colorscale; 

            @(if (>= (strstr $arg1 "soft") 0) [result [
                vec2 offset = gl_MultiTexCoord0.xy*2.82842712474619 - 1.4142135623731;
                gl_TexCoord[2].xyz = vec3(offset, 1.0);
                gl_TexCoord[3].xyz = vec3(offset, softparams.y + (gl_ModelViewMatrix * gl_Vertex).z*softparams.x);
            ]])
        }
    ] [
        @(if (>= (strstr $arg1 "soft") 0) [result [
            #extension GL_ARB_texture_rectangle : enable
            uniform sampler2DRect tex2;
            uniform vec4 softparams;
            varying float softdepth;
            @(gdepthunpackparams)
        ]])
        uniform sampler2D tex0;
        void main(void)
        {
            vec4 diffuse = texture2D(tex0, gl_TexCoord[0].xy);

            @(if (>= (strstr $arg1 "soft") 0) [result [
                @(gdepthunpack depth tex2 gl_FragCoord.xy)
                diffuse.a *= clamp(depth*softparams.x - dot(gl_TexCoord[2].xyz, gl_TexCoord[3].xyz), 0.0, 1.0);
            ]])

            gl_FragColor = diffuse * gl_TexCoord[1];
        }
    ]     
]

loop i 2 [
    particleshader (concatword "particle" (at ["" "soft"] $i))
]

shader 0 "blendbrush" [
    uniform vec4 texgenS, texgenT;
    void main(void)
    {
        gl_Position = ftransform();
        gl_FrontColor = gl_Color;
        gl_TexCoord[0].xy = vec2(dot(texgenS, gl_Vertex), dot(texgenT, gl_Vertex));
    }
] [
    uniform sampler2D tex0;
    void main(void)
    {
        gl_FragColor = texture2D(tex0, gl_TexCoord[0].xy) * gl_Color;
    }
]

lazyshader 0 "moviergb" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        gl_FragColor = texture2DRect(tex0, gl_TexCoord[0].xy);
    }
]

lazyshader 0 "movieyuv" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        vec3 sample = texture2DRect(tex0, gl_TexCoord[0].xy).rgb;
        gl_FragColor = vec4(dot(sample, vec3(0.439216, -0.367788, -0.071427)) + 0.501961,
                            dot(sample, vec3(-0.148224, -0.290992, 0.439216)) + 0.501961,
                            dot(sample, vec3(0.256788, 0.504125, 0.097905)) + 0.062745,
                            0.0);
    }
]

lazyshader 0 "moviey" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + vec2(-1.5, 0.0);
        gl_TexCoord[1].xy = gl_MultiTexCoord0.xy + vec2(-0.5, 0.0);
        gl_TexCoord[2].xy = gl_MultiTexCoord0.xy + vec2( 0.5, 0.0);
        gl_TexCoord[3].xy = gl_MultiTexCoord0.xy + vec2( 1.5, 0.0);
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        vec3 sample1 = texture2DRect(tex0, gl_TexCoord[0].xy).rgb;
        vec3 sample2 = texture2DRect(tex0, gl_TexCoord[1].xy).rgb;
        vec3 sample3 = texture2DRect(tex0, gl_TexCoord[2].xy).rgb;
        vec3 sample4 = texture2DRect(tex0, gl_TexCoord[3].xy).rgb;
        gl_FragColor = vec4(dot(sample3, vec3(0.256788, 0.504125, 0.097905)) + 0.062745,
                            dot(sample2, vec3(0.256788, 0.504125, 0.097905)) + 0.062745,
                            dot(sample1, vec3(0.256788, 0.504125, 0.097905)) + 0.062745,
                            dot(sample4, vec3(0.256788, 0.504125, 0.097905)) + 0.062745);
    }
]

lazyshader 0 "movieu" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + vec2(-3.0, 0.0);
        gl_TexCoord[1].xy = gl_MultiTexCoord0.xy + vec2(-1.0, 0.0);
        gl_TexCoord[2].xy = gl_MultiTexCoord0.xy + vec2( 1.0, 0.0);
        gl_TexCoord[3].xy = gl_MultiTexCoord0.xy + vec2( 3.0, 0.0);
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        vec3 sample1 = texture2DRect(tex0, gl_TexCoord[0].xy).rgb;
        vec3 sample2 = texture2DRect(tex0, gl_TexCoord[1].xy).rgb;
        vec3 sample3 = texture2DRect(tex0, gl_TexCoord[2].xy).rgb;
        vec3 sample4 = texture2DRect(tex0, gl_TexCoord[3].xy).rgb;
        gl_FragColor = vec4(dot(sample3, vec3(-0.148224, -0.290992, 0.43921)) + 0.501961,
                            dot(sample2, vec3(-0.148224, -0.290992, 0.43921)) + 0.501961,
                            dot(sample1, vec3(-0.148224, -0.290992, 0.43921)) + 0.501961,
                            dot(sample4, vec3(-0.148224, -0.290992, 0.43921)) + 0.501961);
    }
]

lazyshader 0 "moviev" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy + vec2(-3.0, 0.0);
        gl_TexCoord[1].xy = gl_MultiTexCoord0.xy + vec2(-1.0, 0.0);
        gl_TexCoord[2].xy = gl_MultiTexCoord0.xy + vec2( 1.0, 0.0);
        gl_TexCoord[3].xy = gl_MultiTexCoord0.xy + vec2( 3.0, 0.0);
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    void main(void)
    {
        vec3 sample1 = texture2DRect(tex0, gl_TexCoord[0].xy).rgb;
        vec3 sample2 = texture2DRect(tex0, gl_TexCoord[1].xy).rgb;
        vec3 sample3 = texture2DRect(tex0, gl_TexCoord[2].xy).rgb;
        vec3 sample4 = texture2DRect(tex0, gl_TexCoord[3].xy).rgb;
        gl_FragColor = vec4(dot(sample3, vec3(0.439216, -0.367788, -0.071427)) + 0.501961,
                            dot(sample2, vec3(0.439216, -0.367788, -0.071427)) + 0.501961,
                            dot(sample1, vec3(0.439216, -0.367788, -0.071427)) + 0.501961,
                            dot(sample4, vec3(0.439216, -0.367788, -0.071427)) + 0.501961);
    }
]

///////////////////////////////////////////////////
//
// reflective/refractive water shaders:
//
///////////////////////////////////////////////////

shader 0 "refractmask" [
    varying float lineardepth;
    void main(void)
    {
        gl_Position = ftransform();
        lineardepth = dot(gl_ModelViewMatrixTranspose[2], gl_Vertex);
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0;
    @(gdepthunpackparams)
    uniform vec4 gdepthpackparams;
    varying float lineardepth;
    uniform float refractdepth;
    void main(void)
    {
        @(if (= $gdepthformat 1) [result [
            vec3 packdepth = texture2DRect(tex0, gl_FragCoord.xy).rgb;
            float depth = dot(packdepth, gdepthunpackparams);
        ]] [result [
            @(gdepthunpack depth tex0 gl_FragCoord.xy) 
            vec3 packdepth = depth * gdepthpackparams.xyz;
            packdepth.yz = fract(packdepth.yz);
            packdepth.xy -= packdepth.yz * (1.0/255.0);
        ]])
        gl_FragColor = vec4(packdepth, clamp(refractdepth*(lineardepth - depth), 0.0, 1.0));
    }
]

lazyshader 0 "waterminimap" [
    void main(void)
    {
        gl_Position = ftransform();
    }
] [
    uniform vec3 watercolor;
    void main(void)
    {
        gl_FragData[0] = vec4(0.0, 0.0, 0.0, 1.0);
        gl_FragData[1] = vec4(0.5, 0.5, 1.0, 0.0);
        gl_FragData[2] = vec4(watercolor, 0.0);
    }
]

watershader = [
  lazyshader 0 $arg1 [
    uniform vec3 camera;
    varying vec3 surface, esurface;
    @(gdepthinterp)
    void main(void)
    {
        gl_Position = ftransform();
        surface = gl_Vertex.xyz;
        @(? (>= (strstr $arg1 "reflect") 0) [
            esurface = (gl_TextureMatrix[1] * gl_Vertex).xyz;
        ])
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy * 0.1;
        @(gdepthpackvert)
    }
  ] [
    #extension GL_ARB_texture_rectangle : enable
    uniform float millis;
    uniform vec3 camera;
    varying vec3 surface, esurface;
    uniform sampler2D tex0, tex1;
    uniform sampler2DRect tex7, tex8, tex9;
    uniform vec4 viewsize;
    uniform vec3 watercolor, waterdeepcolor, waterdeepfade;
    uniform float waterfog, waterspec;
    uniform vec4 waterreflect, waterrefract;
    @(? (>= (strstr $arg1 "caustics") 0) [
        uniform vec3 causticsS, causticsT;
        uniform vec3 causticsblend;
        uniform sampler2D tex2, tex3;
    ])
    @(? (>= (strstr $arg1 "env") 0) [
        uniform samplerCube tex4;
    ])
    @(gdepthunpackparams)
    @(gdepthinterp)
    void main(void)
    {
        vec3 camdir = camera - surface, camvec = normalize(camdir);
        vec3 bump = texture2D(tex0, gl_TexCoord[0].xy + millis*0.05 + 0.23).rgb;
        vec3 bump2 = texture2D(tex0, gl_TexCoord[0].xy - millis*0.05 + 0.71).rgb;
        vec3 bump3 = texture2D(tex0, gl_TexCoord[0].xy + millis*vec2(0.05, -0.05) + 0.49).rgb;
        vec3 bump4 = texture2D(tex0, gl_TexCoord[0].xy + millis*vec2(-0.05, 0.05) + 0.67).rgb;
        bump = normalize(bump + bump2 + bump3 + bump4 - 2.0);
        vec2 rtc = bump.xy * waterrefract.w;

        float rmask = texture2DRect(tex7, gl_FragCoord.xy + rtc).a;
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = texture2DRect(tex8, rtc).rgb * waterrefract.xyz;
        float rdepth = dot(texture2DRect(tex7, rtc).rgb, gdepthunpackparams);
        vec3 rpos = (gl_TextureMatrix[0] * vec4(rdepth*rtc, rdepth, 1.0)).xyz;

        @(if (>= (strstr $arg1 "under") 0) [result [
            float above = rpos.z - surface.z; 
            float alpha = clamp(above, 0.0, 1.0);
        ]] [result [
            vec3 rdir = rpos.xyz - camera;
            float raydepth = length(rdir)*(1.0 + camdir.z/rdir.z);
            float deep = surface.z - rpos.z;
            float alpha = clamp(deep*0.5, 0.0, 1.0);

            @(? (>= (strstr $arg1 "caustics") 0) [
                vec2 ctc = vec2(dot(causticsS, rpos.xyz), dot(causticsT, rpos.xyz));
                float caustics = causticsblend.x*texture2D(tex2, ctc).r + causticsblend.y*texture2D(tex3, ctc).r + causticsblend.z;
                rcolor *= caustics;
            ])

            rcolor = mix(rcolor, watercolor, clamp(raydepth * waterfog, 0.0, 1.0));
            rcolor = mix(rcolor, waterdeepcolor, clamp(deep * waterdeepfade, 0.0, 1.0));
        ]])

        @(if (>= (strstr $arg1 "reflect") 0) [result [
            vec3 reflectdir = reflect(camvec, bump);
            vec3 edir = (gl_TextureMatrix[1] * vec4(-waterreflect.w*reflectdir, 0.0)).xyz;
            vec3 epos = esurface + edir;
            @(loopconcat i 4 [result [
                @(gdepthunpackproj [edepth@[i]] tex9 epos [
                    if(edepth@[i] < epos.z || edepth@[i] > esurface.z) epos += edir;
                ] [
                    edepth@[i] = edepth@[i]*gdepthscale.y + gdepthscale.z;
                    if(gdepthscale.x < epos.z*edepth@[i] || gdepthscale.x > esurface.z*edepth@[i]) epos += edir;
                ])
            ]])
            vec2 etc = epos.xy/epos.z;
            vec3 reflect = texture2DRect(tex8, etc).rgb * waterreflect.xyz;
            float edgefade = clamp(4.0*(0.5 - max(abs(etc.x*viewsize.z - 0.5), abs(etc.y*viewsize.w - 0.5))), 0.0, 1.0);
            float fresnel = 0.25 + 0.75*pow(clamp(1.0 - dot(camvec, bump), 0.0, 1.0), 4.0);
            rcolor = mix(rcolor, reflect, fresnel*edgefade*clamp(-8.0*reflectdir.z, 0.0, 1.0));
        ]] [if (>= (strstr $arg1 "env") 0) [result [
            vec3 reflect = textureCube(tex4, -reflect(camvec, bump)).rgb*0.5;
            float fresnel = 0.5*pow(clamp(1.0 - dot(camvec, bump), 0.0, 1.0), 4.0);
            rcolor = mix(rcolor, reflect, fresnel);
        ]]])

        gl_FragData[0] = vec4(0.0, 0.0, 0.0, alpha);
        gl_FragData[1] = vec4(bump*0.5+0.5, waterspec*alpha);
        gl_FragData[2].rgb = rcolor*alpha;
        @(gdepthpackfrag)
    }
  ]  
]

watershader "water"
watershader "watercaustics"
watershader "waterenv"
watershader "waterenvcaustics"
watershader "waterreflect"
watershader "waterreflectcaustics"
watershader "underwater"

causticshader = [
    lazyshader 0 $arg1 [
        void main(void)
        {
            gl_Position = gl_Vertex;
        }
    ] [
        #extension GL_ARB_texture_rectangle : enable
        uniform vec3 causticsblend;
        uniform sampler2D tex0, tex1;
        uniform sampler2DRect tex9;
        uniform vec4 waterdeepfade;
        @(gdepthunpackparams)
        void main(void)
        {
            @(gdepthunpack depth tex9 gl_FragCoord.xy [
                vec3 ctc = (gl_TextureMatrix[0] * vec4(depth*gl_FragCoord.xy, depth, 1.0)).xyz;
            ] [
                vec4 ctc = gl_TextureMatrix[0] * vec4(gl_FragCoord.xy, depth, 1.0);
                ctc.xyz /= ctc.w;
            ])
            float caustics = causticsblend.x*texture2D(tex0, ctc.xy).r + causticsblend.y*texture2D(tex1, ctc.xy).r + causticsblend.z;
            caustics *= clamp(ctc.z, 0.0, 1.0) * clamp(1.0 - ctc.z*waterdeepfade.w, 0.0, 1.0);
            gl_FragColor.rgb = vec3(0.5 + caustics);
        }
    ]
]
causticshader caustics

waterfogshader = [
    lazyshader 0 $arg1 [
        void main(void)
        {
            gl_Position = gl_Vertex;
        }
    ] [
        #extension GL_ARB_texture_rectangle : enable
        uniform sampler2DRect tex9;
        @(gdepthunpackparams)
        uniform vec3 fogcolor, fogparams;
        uniform float waterdeep;
        uniform vec3 waterdeepcolor, waterdeepfade;
        void main(void)
        {
            @(gdepthunpack depth tex9 gl_FragCoord.xy [
                float fogbelow = (gl_TextureMatrix[0] * vec4(depth*gl_FragCoord.xy, depth, 1.0)).z;
                #define fogcoord depth 
            ] [
                vec3 pos = (gl_TextureMatrix[0] * vec4(gl_FragCoord.xy, depth, 1.0)).xzw;
                pos.xy /= pos.z;
                #define fogbelow pos.y
                #define fogcoord pos.x
            ])
            float foglerp = clamp((fogparams.x - fogcoord) * fogparams.z, 0.0, 1.0);
            foglerp *= clamp(2.0*fogbelow + 0.5, 0.0, 1.0);
            vec3 fogcolor = mix(fogcolor, waterdeepcolor, clamp(fogbelow*waterdeepfade, 0.0, 1.0));
            gl_FragColor.rgb = fogcolor;
            gl_FragColor.a = foglerp;
        }
    ]
]
waterfogshader waterfog

lazyshader 0 "lava" [
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.z));
        world = mat3(tangent, bitangent, gl_Normal);
        @(gdepthpackvert)
    }
] [
    uniform sampler2D tex0, tex1;
    uniform float lavaglow, lavaspec;
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        vec3 diffuse = texture2D(tex0, gl_TexCoord[0].xy).rgb;
        vec3 bump = texture2D(tex1, gl_TexCoord[0].xy).rgb*2.0-1.0;
        vec3 bumpw = world * bump;
        gl_FragData[0] = vec4(diffuse, 1.0);
        gl_FragData[1] = vec4(bumpw*0.5+0.5, lavaspec);
        gl_FragData[2].rgb = diffuse*lavaglow;
        @(gdepthpackfrag)
    }
]

lazyshader 0 "waterfallenv" [
    uniform vec4 camera;
    varying vec3 camdir;
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        camdir = camera.xyz - gl_Vertex.xyz;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.z));
        world = mat3(tangent, bitangent, gl_Normal);
        @(gdepthpackvert)
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex7, tex8;
    uniform samplerCube tex3;
    uniform sampler2D tex0, tex1;
    uniform vec3 waterfallcolor;
    uniform float waterfallspec;
    uniform vec4 waterfallrefract;
    varying vec3 camdir;
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        vec3 camvec = normalize(camdir);
        vec3 diffuse = texture2D(tex0, gl_TexCoord[0].xy).rgb;
        vec3 bump = texture2D(tex1, gl_TexCoord[0].xy).rgb*2.0 - 1.0;
        vec3 bumpw = world * bump;

        vec2 rtc = bump.xy * waterfallrefract.w;
        float rmask = texture2DRect(tex7, gl_FragCoord.xy + rtc).a;
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = texture2DRect(tex8, rtc).rgb * waterfallrefract.xyz;

        float invfresnel = dot(camvec, bumpw);
        vec3 env = textureCube(tex3, 2.0*bumpw*invfresnel - camvec).rgb;
        env *= 0.1 + 0.4*pow(clamp(1.0 - invfresnel, 0.0, 1.0), 2.0);

        gl_FragData[0] = vec4(0.0, 0.0, 0.0, 1.0);
        gl_FragData[1] = vec4(bumpw*0.5+0.5, waterfallspec*(1.0 - dot(diffuse, vec3(0.33))));
        gl_FragData[2].rgb = mix(rcolor, waterfallcolor, diffuse) + env;
        @(gdepthpackfrag)
    }
]

lazyshader 0 "waterfall" [
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.z));
        world = mat3(tangent, bitangent, gl_Normal);
        @(gdepthpackvert)
    }
] [ 
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex7, tex8;
    uniform sampler2D tex0, tex1;
    uniform vec3 waterfallcolor;
    uniform float waterfallspec;
    uniform vec4 waterfallrefract;
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        vec3 diffuse = texture2D(tex0, gl_TexCoord[0].xy).rgb;
        vec3 bump = texture2D(tex1, gl_TexCoord[0].xy).rgb*2.0 - 1.0;
        vec3 bumpw = world * bump;

        vec2 rtc = bump.xy * waterfallrefract.w;
        float rmask = texture2DRect(tex7, gl_FragCoord.xy + rtc).a;
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = texture2DRect(tex8, rtc).rgb * waterfallrefract.xyz;

        gl_FragData[0] = vec4(0.0, 0.0, 0.0, 1.0);
        gl_FragData[1] = vec4(bumpw*0.5+0.5, waterfallspec*(1.0 - dot(diffuse, vec3(0.33))));
        gl_FragData[2].rgb = mix(rcolor, waterfallcolor, diffuse);
        @(gdepthpackfrag)
    }
]
altshader waterfallenv waterfall

lazyshader 0 "glassenv" [
    uniform vec4 camera;
    varying vec3 camdir;
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        camdir = camera.xyz - gl_Vertex.xyz;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.z));
        world = mat3(tangent, bitangent, gl_Normal);
        @(gdepthpackvert)
    }
] [ 
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex7, tex8;
    uniform samplerCube tex0;
    uniform sampler2D tex1;
    uniform float glassspec;
    uniform vec4 glassrefract;
    varying vec3 camdir;
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        vec3 camvec = normalize(camdir);
        vec3 bump = texture2D(tex1, gl_TexCoord[0].xy).rgb*2.0 - 1.0;
        vec3 bumpw = world * bump;

        vec2 rtc = bump.xy * glassrefract.w;
        float rmask = texture2DRect(tex7, gl_FragCoord.xy + rtc).a;
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = texture2DRect(tex8, rtc).rgb;
        rcolor *= glassrefract.xyz;
      
        float invfresnel = dot(camvec, bumpw);
        vec3 env = textureCube(tex0, 2.0*bumpw*invfresnel - camvec).rgb;
        env *= 0.1 + 0.4*pow(clamp(1.0 - invfresnel, 0.0, 1.0), 2.0);
  
        gl_FragData[0] = vec4(0.0, 0.0, 0.0, 1.0);
        gl_FragData[1] = vec4(bumpw*0.5+0.5, glassspec);
        gl_FragData[2].rgb = rcolor + env;
        @(gdepthpackfrag)
    }
]

lazyshader 0 "glass" [
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(gl_Normal.z));
        world = mat3(tangent, bitangent, gl_Normal);
        @(gdepthpackvert)
    }
] [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex7, tex8;
    uniform sampler2D tex1;
    uniform float glassspec;
    uniform vec4 glassrefract;
    varying mat3 world;
    @(gdepthinterp)
    void main(void)
    {
        vec3 bump = texture2D(tex1, gl_TexCoord[0].xy).rgb*2.0 - 1.0;
        vec3 bumpw = world * bump;

        vec2 rtc = bump.xy * glassrefract.w;
        float rmask = texture2DRect(tex7, gl_FragCoord.xy + rtc).a;
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = texture2DRect(tex8, rtc).rgb;
        rcolor *= glassrefract.xyz;
        
        gl_FragData[0] = vec4(0.0, 0.0, 0.0, 1.0);
        gl_FragData[1] = vec4(bumpw*0.5+0.5, glassspec);
        gl_FragData[2].rgb = rcolor; 
        @(gdepthpackfrag)
    }
]
altshader glassenv glass

defershader 0 "grass" [
  loop i 2 [
    variantshader 0 "grass" (? $i 0 -1) [
        @(gdepthinterp)
        @(if $i [result [uniform vec4 blendmapparams;]])
        void main(void)
        {
            gl_Position = ftransform();
            gl_FrontColor = gl_Color;
            gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
            @(if $i [result [
                gl_TexCoord[1].xy = (gl_Vertex.xy - blendmapparams.xy)*blendmapparams.zw;
            ]])
            @(gdepthpackvert)
        }
    ] [
        uniform sampler2D tex0;
        uniform float grasstest;
        @(gdepthinterp)
        @(if $i [result [uniform sampler2D tex1;]])
        void main(void)
        {
            vec4 color = texture2D(tex0, gl_TexCoord[0].xy) * gl_Color;
            @(if $i [result [
                color.a *= texture2D(tex1, gl_TexCoord[1].xy).r;
            ]])
            if(color.a <= grasstest)
                discard;
            gl_FragData[0] = vec4(color.rgb, 1.0);
            gl_FragData[1] = vec4(0.5, 0.5, 1.0, 0.0); 
            gl_FragData[2] = vec4(0.0);
            @(gdepthpackfrag)
        }
    ]
  ]
]

shader 0 "overbrightdecal" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_FrontColor = gl_Color;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    uniform sampler2D tex0;
    void main(void)
    {
        vec4 diffuse = texture2D(tex0, gl_TexCoord[0].xy);
        gl_FragColor = mix(gl_Color, diffuse, gl_Color.a);
    }
]

shader 0 "saturatedecal" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_FrontColor = gl_Color;
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
    }
] [
    uniform sampler2D tex0;
    void main(void)
    {
        vec4 diffuse = texture2D(tex0, gl_TexCoord[0].xy);
        diffuse.rgb *= 2.0;
        gl_FragColor = diffuse * gl_Color;
    }
]

shader 0 "decal" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = gl_Color;
    }
] [
    uniform sampler2D tex0;
    void main(void)
    {
        gl_FragColor = gl_Color * texture2D(tex0, gl_TexCoord[0].xy);
    }
]

shader 0 "skyboxoverbright" [
    void main(void)
    {
        gl_Position = ftransform();
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_FrontColor = gl_Color;
    }
] [
    uniform sampler2D tex0;
    uniform vec2 overbrightparams;
    void main(void)
    {
        vec3 color = texture2D(tex0, gl_TexCoord[0].xy).rgb;
        float lum = dot(vec3(@lumweights), color);
        float scale = 1.0 + overbrightparams.x*clamp(lum - overbrightparams.y, 0.0, 1.0);
        gl_FragColor.rgb = gl_Color.rgb * color * scale;
    }
]

smaashaders = [
    smaapreset = $arg1   
    exec "data/smaa.cfg"
]

fxaashaders = [
    fxaapreset = $arg1
    exec "data/fxaa.cfg"
]

