// This file has a bunch of utility scripts which will make it considerably easier to script things.
// You should consider using it and making your own if necessary (in your own files)

// First off we have bit functions that work on the global variables
// handy for dialogue and quest related checks.

// interpretting the given global variable as a number, it will turn on ALL the bits in the mask, arg2
// args variable mask
onbit = [
	r_global_set $arg1 (| (r_global_get $arg1) $arg2)
]

// interpretting the given global variable as a number, it will turn off ALL the bits in arg2
// args variable mask
offbit = [
	r_global_set $arg1 (&~ (r_global_get $arg1) $arg2)
]

// interpretting the given global variable as a number, it will check if any of the bits in the mask, arg2, is true
// if yes it iwll execute the true case, otherwise the false case.
// args variable mask true false
ifbit = [
	if (& (r_global_get $arg1) $arg2) [arg3] [arg4]
]

// interpretting the given global variable as a number, it will check if all of the bits in the mask, arg2, is true
// if yes it iwll execute the true case, otherwise the false case.
// args variable mask true false
ifbits = [
	if (= (& (r_global_get $arg1) $arg2) $arg2) [arg3] [arg4]
]

//A helper function for getting the full path of an icon
r_iconpath = [
	concatword "<premul>data/rpg/hud/" $arg1
]

// Next up, we have some basic skill competency checks.
// good for consistency across dialogue use.


// Checks the given critter's intelligence, if it's found lacking, the true case is executed,
// otherwise the false case will be.
// args critter true false
ifdumb = [
	if (< (r_get_attr $arg1 $STAT_INTELLIGENCE) 40) [arg2] [arg3]
]

// Checks the given critter's intelligence, if it's above average the true case is executed,
// otherwise the false case will be.
// args critter true false
ifsmart = [
	if (>= (r_get_attr $arg1 $STAT_INTELLIGENCE) 85) [arg2] [arg3]
]

// Now some generic stuff for entity interaction

//Retrieves the faction of the provided reference
r_get_faction = [
	local res
	res = -1
	case (r_reftype $arg1) $REF_CHAR [
		r_select_char $arg1 [
			res = $r_char_faction
		]
	] $REF_CONTAINER [
		r_select_container $arg1 [
			res = $r_container_faction
		]
	] () [
		error (concatword "reference ^"" $arg1 "^" doesn't have a faction")
	]
	result $res
]

// Returns the relationship score of the given two critters
// args first second
r_get_relationship = [
	local firstfaction secondfaction relation

	firstfaction = (r_get_faction $arg1)
	secondfaction = (r_get_faction $arg2)

	//same faction - mingle mingle mingle!
	if (= $firstfaction $secondfaction) [
		relation = 100
	] [
		r_select_faction $arg1 [
			relation = (r_faction_get_relation $secondfaction)
		]
		r_select_faction $arg2 [
			relation = (min $relation (r_faction_get_relation $firstfaction))
		]
	]

	result $relation
]

// Checks if the two given critters are considered hostile to each other
// the other operate similarly but with different conditionals
// args first second
r_hostile = [
	<= (r_get_relationship $arg1 $arg2) 0
]

r_wary = [
	local relation
	relation = (r_get_relationship $arg1 $arg2)

	&& (> $relation 0) (<= $relation 30)
]

r_friendly = [
	local relation
	relation = (r_get_relationship $arg1 $arg2)

	&& (> $relation 30) (<= $relation 60)
]

r_like = [
	local relation
	relation = (r_get_relationship $arg1 $arg2)

	> $relation 60
]

//A conditional for responding to ALL possible cases in quick succession.
//args relation hostile wary friendly like
r_relationcond = [
	cond [ <= $arg1 0 ] [
		arg2
	] [ <= $arg1 30 ] [
		arg3
	] [ <= $arg1 60 ] [
		arg4
	] () [
		arg5
	]
]

//Like the above, but takes two critters instead of a single relationship value
r_relationcondent = [
	r_relationcond (r_get_relationship $arg1 $arg2) $arg3 $arg4 $arg5 $arg6
]

// Modifies the relationship between the given critters by the given increment
// args first second delta
r_mod_relationship = [
	local firstfaction secondfaction

	firstfaction = (r_get_faction $arg1)
	secondfaction = (r_get_faction $arg2)

	if (!= $firstfaction $secondfaction) [
		local relation
		relation = (+ (r_get_relationship $arg1 $arg2) $arg3)
		relation = (clamp relation 0 100)

		r_select_faction $arg1 [
			r_faction_set_relation $secondfaction $relation
		]
		r_select_faction $arg2 [
			r_faction_set_relation $firstfaction $relation
		]
	]
]

