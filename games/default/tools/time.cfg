// This is a helper script to help manage day/night cycles
// You can query the state with commands defined here, as well as modify it.

// Note that by default, the clock is updated once a second,
// time is measured in seconds, and each day is 24 hours.
// Each month is assumed to be 30 days long, a year is 360 days


// To have the day/night cycle active,
// at least where time advancement is concerned,
// Simply uncomment the following code, and adjust as desired

// r_global_new "__timescale" 1
// r_global_new "__time" (* 8 60 60) // current time in seconds
// r_global_new "__day" 1 // current day
// r_global_new "__month" 2 // current month
// r_global_new "__year" 2013 // current year
//
// r_timer "advancetime" 1000 [ 1 ] [ r_advancetime (r_global_get "__timescale") ]



r_normalisetime = [
	local time day month year
	time = (r_global_get __time)
	day = (r_global_get __day)
	month = (r_global_get __month)
	year = (r_global_get __year)

	while [ >= $time 86400 ] [ time = (- $time 86400); day = (+ $day 1) ]
	while [ < $time 0 ] [ time = (+ $time 86400); day = (- $day 1) ]
	while [ >= $day 31 ] [ day = (- $day 30); month = (+ $month 1) ]
	while [ < $day 1 ] [ day = (+ $day 30); month = (- $month 1) ]
	while [ >= $month 13 ] [ month = (- $month 12); year = (+ $year 1) ]
	while [ < $month 1 ] [ month = (+ $month 12); year = (- $year 1) ]

	r_global_set __time $time
	r_global_set __day $day
	r_global_set __month $month
	r_global_set __year $year
]

// advances time by a specific amount
// args: seconds, days, month, years
r_advancetime = [
	r_global_set __time (+ (r_global_get __time) $arg1)
	r_global_set __day (+ (r_global_get __day) $arg2)
	r_global_set __month (+ (r_global_get __month) $arg3)
	r_global_set __year (+ (r_global_get __year) $arg4)

	r_normalisetime
]

// checks if the given time is before the current time
// note the given time is not normalised
// args: seconds, days, months, years
r_beforetime = [
	local time day month year ret
	time = (r_global_get __time)
	day = (r_global_get __day)
	month = (r_global_get __month)
	year = (r_global_get __year)

	ret = (< $arg1 $time)
	if (>= $numargs 2) [ ret = (< $arg2 (+ $day $ret)) ]
	if (>= $numargs 3) [ ret = (< $arg3 (+ $month $ret)) ]
	if (>= $numargs 4) [ ret = (< $arg4 (+ $year $ret)) ]

	result $ret
]

// checks if the given time is after the current time
// note the given time is not normalised
// args: seconds, days, months, years
r_aftertime = [
	local time day month year ret
	time = (r_global_get __time)
	day = (r_global_get __day)
	month = (r_global_get __month)
	year = (r_global_get __year)

	ret = (> $arg1 $time)
	if (>= $numargs 2) [ ret = (> $arg2 (- $day $ret)) ]
	if (>= $numargs 3) [ ret = (> $arg3 (- $month $ret)) ]
	if (>= $numargs 4) [ ret = (> $arg4 (- $year $ret)) ]

	result $ret
]

// Converts the given millis needed to naturally advance the given time.
// args: seconds, days, months, years
r_timetomillis = [
	* 1000 (+ (* (+ (* (+ (* $arg4 12) $arg3) 30) $arg2) 86400) $arg1)
]

// advanced a specified amount of milliseconds
r_advancemillis = [
	r_advancetime (div (* $arg1 (r_global_get __timescale)) 1000)
]

// formats the time base on a string with tokens form %1 to %6,
// going from smallest to largest unit.
// eg r_formattime "%3:%2" for 24h time
r_formattime = [
	local second minute hour day month year
	second = (mod (r_global_get __time) 60)
	minute = (mod (div (r_global_get __time) 60) 60)
	hour = (div (r_global_get __time) 3600)
	day = (r_global_get __day)
	month = (r_global_get month)
	year = (r_global_get __year)

	format $arg1 $second $minute $hour $day $month $year
]

// formats the time based on custom user code
// r_genformattime [ concatword (mod $hour 12) : $minute (? (>= $hour 12) " PM" " AM") ]
r_genformattime = [
	local second minute hour day month year
	second = (mod (r_global_get __time) 60)
	minute = (mod (div (r_global_get __time) 60) 60)
	hour = (div (r_global_get __time) 3600)
	day = (r_global_get __day)
	month = (r_global_get __month)
	year = (r_global_get __year)

	arg1
]
