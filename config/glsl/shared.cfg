lazyshader = [
    defershader $arg1 $arg2 [
        shader @arg1 @arg2 [@@arg3] [@@arg4]
    ]
]

ginterpvert = [
    if (|| $gdepthformat $arg1) [result [
        uniform vec2 lineardepthscale;
        uniform vec3 gdepthpackparams;
        varying float lineardepth;
    ]]
]
msaainterpvert = [ginterpvert $msaasamples]

ginterpfrag = [
    result [
        fragdata(0, gcolor, vec4)
        fragdata(1, gnormal, vec4)
        @(? $gdepthformat [
            fragdata(2, gdepth, vec4)
            fragdata(3, gglow, vec4)
        ] [
            fragdata(2, gglow, vec4)
        ])
        @(? (|| $gdepthformat $arg1) [
            uniform vec2 lineardepthscale;
            uniform vec3 gdepthpackparams;
            varying float lineardepth;
        ])
    ]
]
msaainterpfrag = [ginterpfrag $msaasamples]

gdepthpackvert = [
    if (|| $gdepthformat $arg1) [result [
        lineardepth = dot(lineardepthscale, gl_Position.zw);
    ]]
]
msaapackvert = [gdepthpackvert $msaasamples]

gpackdepth = [
    result [
        vec3 @arg1 = @arg2 * gdepthpackparams;
        @arg1 = vec3(@arg1.x, fract(@arg1.yz));
        @arg1.xy -= @arg1.yz * (1.0/255.0);
    ]
]

ghashdepth = [
    if $arg3 [
        arg1 = [(@arg1 + 5.0*@arg3)]
    ]
    if $arg2 [result [
        @arg2*0.76 + mix(0.75, 0.25, @arg2)*fract(@arg1*mix(-1.0/192.0, -1.0/64.0, @arg2))
    ]] [result [
        0.75*fract(@arg1*(-1.0/192.0))
    ]]
]

gdepthpackfrag = [
    if (= $gdepthformat 1) [result [
        @(gpackdepth packdepth lineardepth)
        gdepth.rgb = packdepth;
        gdepth.a = @(? $arg2 $arg2 [0.0]);
        @(if $usepacknorm [result [
            gnormal.a = @(if $arg1 [ghashdepth lineardepth "" $arg3] [result [0.0]]);
        ]])
    ]] [result [
        @(? (> $gdepthformat 1) [
            gdepth.r = lineardepth;
        ])
        @(if $usepacknorm [result [
            gnormal.a = @(if $arg1 [ghashdepth lineardepth $arg2 $arg3] [? $arg2 $arg2 [0.0]]);
        ]])
    ]]
]
msaapackfrag = [gdepthpackfrag $msaasamples $arg1 $arg2]

gnormpack = [
    if $usepacknorm [result [
        gnormal.rgb = @arg1 @(if $arg2 [result [* sqrt(0.5 + 0.5*(@arg2))]]) * 0.5 + 0.5;
    ]] [result [
        gnormal.rgb = @arg1*0.5 + 0.5;
        gnormal.a = @(if $arg2 [result [(@arg2)]] [result [1.0]]);
    ]]
]

gglowpack = [
    result [
        @(if $arg1 [result [
            float colork = max(gcolor.r, max(gcolor.g, gcolor.b)), glowk = max(@arg1.r, max(@arg1.g, @arg1.b));
        ]])
        glowk /= glowk + colork + 1.0e-3;
        gcolor.rgb = @(if $arg1 [result [mix(gcolor.rgb, @arg1, glowk)]] [result [gcolor.rgb]]) * (1.0 - 2.0*glowk*(glowk - 1.0));
        #define @arg2 1.0-glowk
    ]
]

gnormpackdef = [
    if $usepacknorm [result [
        #ifdef @arg2
            gnormal.rgb = @arg1*sqrt(0.5 + 0.5*(@arg2))*0.5 + 0.5;
        #else
            gnormal.rgb = @arg1*0.5 + 0.5;
        #endif
    ]] [result [
        gnormal.rgb = @arg1*0.5 + 0.5;
        #ifdef @arg2
            gnormal.a = (@arg2);
        #else
            gnormal.a = 1.0;
        #endif
    ]]
]

gdepthunpackparams = [
    result [
        uniform vec3 gdepthscale;
        uniform vec3 gdepthunpackparams;
    ]
]

gdepthunpack = [
    if $arg6 [
        if $arg7 [result [
            vec3 @[arg7] = @[arg2].rgb;
            float @[arg1] = dot(@[arg7], gdepthunpackparams); 
            @arg3
        ]] [result [
            float @[arg1] = dot(@[arg2].rgb, gdepthunpackparams); 
            @arg3
        ]]
    ] [if (|| $gdepthformat $arg5) [
        if (|| (> $gdepthformat 1) $arg5) [result [
            float @[arg1] = @[arg2].r;
            @arg3
        ]] [result [
            float @[arg1] = dot(@[arg2].rgb, gdepthunpackparams); 
            @arg3
        ]]
    ] [if (=s $arg4 []) [result [
        float @[arg1] = gdepthscale.x / (@[arg2].r*gdepthscale.y + gdepthscale.z);
    ]] [result [
        float @[arg1] = @[arg2].r;
        @arg4
    ]]]]
]

gfetchdefs = [
    gfetchprefix = (? $arg3 $arg3 "gfetch")
    if (? (>= $numargs 2) $arg2 $msaasamples) [result [
        uniform sampler2DMS @(prettylist $arg1);
        #define @[gfetchprefix]sample 0
        #define @[gfetchprefix](sampler, coords) texelFetch(sampler, ivec2(coords), @[gfetchprefix]sample)
        #define @[gfetchprefix]offset(sampler, coords, offset) texelFetch(sampler, ivec2(coords) + offset, @[gfetchprefix]sample)
        #define @[gfetchprefix]proj(sampler, coords) texelFetch(sampler, ivec2(coords.xy / coords.z), @[gfetchprefix]sample)
        #if __VERSION__ >= 130 || defined(GL_EXT_gpu_shader4)
            #define @[gfetchprefix]clamp(sampler, coords) texelFetch(sampler, clamp(ivec2(coords), ivec2(0), textureSize(sampler)-1), @[gfetchprefix]sample)
        #else
            #define @[gfetchprefix]clamp(sampler, coords) texelFetch(sampler, ivec2(clamp(coords, vec2(0.0), vec2(textureSize(sampler)-1))), @[gfetchprefix]sample)
        #endif
        @(if (! $arg3) [gdepthunpackparams])
    ]] [result [
        uniform sampler2DRect @(prettylist $arg1);
        #define @[gfetchprefix](sampler, coords) texture2DRect(sampler, coords)
        #define @[gfetchprefix]offset(sampler, coords, offset) texture2DRectOffset(sampler, coords, offset)
        #define @[gfetchprefix]proj(sampler, coords) texture2DRectProj(sampler, coords)
        #define @[gfetchprefix]clamp(sampler, coords) texture2DRect(sampler, coords)
        @(if (! $arg3) [gdepthunpackparams])
    ]]
]

screentexcoord = [
    result [
        uniform vec4 screentexcoord@arg1;
        #define vtexcoord@arg1 (vvertex.xy * screentexcoord@arg1.xy + screentexcoord@arg1.zw)
    ]
]


