// These aliases correspond to the enumerators, use these in your definitions
// to combine bitwise values use the | operator ie (| 8 7) is 15 (| 9 5) is 13

// Enumerates a list of items sequentially
// args offset, items
// eg enum 1 [ one two three ] will define 3 aliases, one, two and three respectively with the values, 1, 2 and 3
enum = [
	loop i (listlen $arg2) [
		alias (at $arg2 $i) (+ $arg1 $i)
	]
]

// Like the above, but it increased it by powers of two starting at 1 as opposed to 0
// do note it subtracts one from the final item to make a bitwise mask for all the available flags.
// args offset, items
// for example enumpow2 2 [four eight sixteen thirtyone] will define 4 aliases with the respective values of 4, 8, 16 and 31
enumpow2 = [
	loop i (listlen $arg2) [
		local last
		last = (= (+ $i 1) (listlen $arg2))
		alias (at $arg2 $i) (- (<< 1 (+ $arg1 $i)) (? $last 1 0))
	]
]

// possible status effects
// these are to be used with r_status_addgeneric
// unless otherwise stated.
enum 0 [
	STATUS_HEALTH
	STATUS_MANA
	STATUS_MOVE
	STATUS_WEIGHT
	STATUS_CRIT
	STATUS_HREGEN
	STATUS_MREGEN
	STATUS_STRENGTH
	STATUS_ENDURANCE
	STATUS_AGILITY
	STATUS_CHARISMA
	STATUS_WISDOM
	STATUS_INTELLIGENCE
	STATUS_LUCK
	STATUS_ARMOUR
	STATUS_DIPLOMACY
	STATUS_MAGIC
	STATUS_MARKSMAN
	STATUS_MELEE
	STATUS_STEALTH
	STATUS_CRAFT

	STATUS_FIRE_T
	STATUS_WATER_T
	STATUS_AIR_T
	STATUS_EARTH_T
	STATUS_ARCANE_T
	STATUS_MIND_T
	STATUS_HOLY_T
	STATUS_DARKNESS_T
	STATUS_SLASH_T
	STATUS_BLUNT_T
	STATUS_PIERCE_T

	STATUS_FIRE_R
	STATUS_WATER_R
	STATUS_AIR_R
	STATUS_EARTH_R
	STATUS_ARCANE_R
	STATUS_MIND_R
	STATUS_HOLY_R
	STATUS_DARKNESS_R
	STATUS_SLASH_R
	STATUS_BLUNT_R
	STATUS_PIERCE_R

	STATUS_STUN        // -- UNIMPLEMENTED
	STATUS_SILENCE     // -- UNIMPLEMENTED
	STATUS_DOOM
	STATUS_LOCK
	STATUS_MAGELOCK
	STATUS_DISPEL      // -- UNIMPLEMENTED
	STATUS_REFLECT     // -- UNIMPLEMENTED
	STATUS_INVIS
	STATUS_LIGHT       // -- use r_status_addlight
	STATUS_POLYMORPH   // -- use r_status_addpolymorph
	STATUS_SIGNAL      // -- use r_status_addsignal
	STATUS_SCRIPT      // -- use r_status_addscript
	STATUS_MAX
]

// attack types
enum -1 [
	ATTACK_NONE
	ATTACK_FIRE
	ATTACK_WATER
	ATTACK_AIR
	ATTACK_EARTH
	ATTACK_ARCANE
	ATTACK_MIND
	ATTACK_HOLY
	ATTACK_DARKNESS
	ATTACK_SLASH
	ATTACK_BLUNT
	ATTACK_PIERCE
	ATTACK_MAX
]

//Client Statuses - all but these two are irrelevant to the RPG
enum 0 [
	CS_ALIVE
	CS_DEAD
]

// reference types ; returned by r_reftype
enum 0 [
	REF_INVALID
	REF_CHAR
	REF_ITEM
	REF_OBSTACLE
	REF_CONTAINER
	REF_PLATFORM
	REF_TRIGGER
	REF_INV
	REF_EQUIP
	REF_MAP
	REF_VEFFECT
	REF_AFFECT
]

// entity types
enum 0 [
	ENT_INVALID
	ENT_CHAR
	ENT_ITEM
	ENT_OBSTACLE
	ENT_CONTAINER
	ENT_PLATFORM
	ENT_TRIGGER
]

// set equipable slots, see r_item_use_slots
enumpow2 0 [
	SLOT_LHAND
	SLOT_RHAND
	SLOT_LEGS
	SLOT_ARMS
	SLOT_TORSO
	SLOT_HEAD
	SLOT_FEET
	SLOT_QUIVER
	SLOT_MAX
]

enumpow2 0 [
	CHARGE_SPEED
	CHARGE_MAG
	CHARGE_DURATION
	CHARGE_TRAVEL
	CHARGE_RADIUS
	CHARGE_MAX
]


//stats
enum 0 [
	STAT_STRENGTH
	STAT_ENDURANCE
	STAT_AGILITY
	STAT_CHARISMA
	STAT_WISDOM
	STAT_INTELLIGENCE
	STAT_LUCK
	STAT_MAX
]

// skills
enum -1 [
	SKILL_NONE
	SKILL_ARMOUR
	SKILL_DIPLOMACY
	SKILL_MAGIC
	SKILL_MARKSMAN
	SKILL_MELEE
	SKILL_STEALTH
	SKILL_CRAFT
	SKILL_MAX
]

// item flags
enumpow2 0 [
	ITEM_QUEST
	ITEM_CURSED
	ITEM_NATURAL
	ITEM_STOLEN
	ITEM_MAX
]

// obstacle flags
enumpow2 0 [
	OBS_STATIONARY //prevents the obstacle from moving
	OBS_MAX
]

// platform flags
enumpow2 0 [
	PLAT_ACTIVE
	PLAT_MAX
]

// trigger flags
enumpow2 0 [
	TRIG_INVIS
	TRIG_TRIGGERED
]

// Map flags
enumpow2 0 [
	MAP_VOLATILE  //nothing persists - everything is cleared when the player leaves
	MAP_NOSAVE    //perfect for dungeon levels
	MAP_NOMINIMAP
	MAP_MAX
]

//recipe flags
enumpow2 0 [
	RECIPE_KNOWN  //player can use it
	RECIPE_SINGLE //recipe forgotten after use
	RECIPE_MAX
]

// item use types
enum 0 [
	USE_INVALID
	USE_CONSUME
	USE_ARMOUR
	USE_WEAPON
	USE_MAX
]

// particle effect flags
enumpow2 0 [
	FX_DYNLIGHT
	FX_FLARE
	FX_FIXEDFLARE
	FX_MAX
]

// projectile flags
enumpow2 0 [
	P_TIME       // dissapears after set time
	P_DIST       // dissapears after set distance
	P_RICOCHET   // bounces off walls
	P_VOLATILE   // detonates when the projectile expires without hitting anything
	P_PROXIMITY  // detonates when something enters its radius
	P_STATIONARY // does not move (ie mines) - requires proximity or time
	P_PERSIST    // attacks travel through or bounce of targets; only hits a target once
	P_MAX
]

// weapon target indices
enum 0 [
	T_SINGLE  //hits one
	T_MULTI   //hits many near the area of impact
	T_AREA    //persistant effect on area
	T_SELF    //on self
	T_SMULTI  //for multi effects on self
	T_SAREA   //for area effects on self
	T_HORIZ   //sideways arc; technically not horizontal when looking up or down.
	T_VERT    //vertical arc
	T_CONE    // hits everything inside a cone
	T_MAX
]

//the numbers associated to the engine's particles
enum 0 [
	PART_BLOOD
	PART_WATER
	PART_SMOKE
	PART_STEAM
	PART_FLAME
	PART_FIREBALL1
	PART_FIREBALL2
	PART_FIREBALL3
	PART_STREAK
	PART_LIGHTNING
	PART_EXPLOSION
	PART_EXPLOSION_BLUE
	PART_SPARK
	PART_EDIT
	PART_MUZZLE_FLASH1
	PART_MUZZLE_FLASH2
	PART_MUZZLE_FLASH3
	PART_HUD_ICON		// DO NOT USE
	PART_HUD_ICON_GREY	// DO NOT USE
	PART_TEXT			// DO NOT USE
	PART_METER			// DO NOT USE
	PART_METER_VS		// DO NOT USE
	PART_SNOW
	PART_LEAVES
]

//dynlight types
enumpow2 0 [
	DL_SHRINK
	DL_EXPAND
	DL_FLASH
	DL_MAX
]

//decal types
enum -1 [
	DECAL_NONE
	DECAL_BURN
	DECAL_BLOOD
	DECAL_STAIN
	DECAL_RIPPLE
	DECAL_LEAVES
	DECAL_MAX
]
